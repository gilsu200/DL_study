{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vOBSOmG33oIL"
      },
      "source": [
        "This is a companion notebook for the book [Deep Learning with Python, Second Edition](https://www.manning.com/books/deep-learning-with-python-second-edition?a_aid=keras&a_bid=76564dff). For readability, it only contains runnable code blocks and section titles, and omits everything else in the book: text paragraphs, figures, and pseudocode.\n",
        "\n",
        "**If you want to be able to follow what's going on, I recommend reading the notebook side by side with your copy of the book.**\n",
        "\n",
        "This notebook was generated for TensorFlow 2.6."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GNvNJQi63oIP"
      },
      "source": [
        "# Getting started with neural networks: Classification and regression"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jxI9JqwD3oIQ"
      },
      "source": [
        "## Classifying movie reviews: A binary classification example"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YQMAOeEt3oIQ"
      },
      "source": [
        "### The IMDB dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MnMVTrME3oIR"
      },
      "source": [
        "**Loading the IMDB dataset**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1fzAaxq23oIR"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.datasets import imdb\n",
        "(train_data, train_labels), (test_data, test_labels) = imdb.load_data(\n",
        "    num_words=10000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yMj9G7Ym3oIS"
      },
      "outputs": [],
      "source": [
        "train_data[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3JijEtcp3oIT"
      },
      "outputs": [],
      "source": [
        "train_labels[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "t_BezaFv3oIT"
      },
      "outputs": [],
      "source": [
        "max([max(sequence) for sequence in train_data])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oLi7pO8R3oIU"
      },
      "source": [
        "**Decoding reviews back to text**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "NNOaa8_Q3oIU",
        "outputId": "ab0b0da4-6fbb-480e-d821-14546151511e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        }
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'imdb' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-92d6f4910273>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mword_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimdb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_word_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m reverse_word_index = dict(\n\u001b[1;32m      3\u001b[0m     [(value, key) for (key, value) in word_index.items()])\n\u001b[1;32m      4\u001b[0m decoded_review = \" \".join(\n\u001b[1;32m      5\u001b[0m     [reverse_word_index.get(i - 3, \"?\") for i in train_data[0]])\n",
            "\u001b[0;31mNameError\u001b[0m: name 'imdb' is not defined"
          ]
        }
      ],
      "source": [
        "word_index = imdb.get_word_index()\n",
        "reverse_word_index = dict(\n",
        "    [(value, key) for (key, value) in word_index.items()])\n",
        "decoded_review = \" \".join(\n",
        "    [reverse_word_index.get(i - 3, \"?\") for i in train_data[0]])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LHJUSsz23oIU"
      },
      "source": [
        "### Preparing the data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C1PTJzzK3oIU"
      },
      "source": [
        "**Encoding the integer sequences via multi-hot encoding**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "9FPIMf_N3oIU",
        "outputId": "82b170f9-acc9-4784-9c62-e3c7e3a63ed5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 315
        }
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-aaba6621f322>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m             \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mx_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvectorize_sequences\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mx_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvectorize_sequences\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-10-aaba6621f322>\u001b[0m in \u001b[0;36mvectorize_sequences\u001b[0;34m(sequences, dimension)\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msequence\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msequences\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msequence\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m             \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mx_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvectorize_sequences\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mIndexError\u001b[0m: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "def vectorize_sequences(sequences, dimension=10000):\n",
        "    results = np.zeros((len(sequences), dimension))\n",
        "    for i, sequence in enumerate(sequences):\n",
        "        for j in sequence:\n",
        "            results[i, j] = 1.\n",
        "    return results\n",
        "x_train = vectorize_sequences(train_data)\n",
        "x_test = vectorize_sequences(test_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CLwxBLQk3oIV"
      },
      "outputs": [],
      "source": [
        "x_train[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iSyj6NRr3oIV"
      },
      "outputs": [],
      "source": [
        "y_train = np.asarray(train_labels).astype(\"float32\")\n",
        "y_test = np.asarray(test_labels).astype(\"float32\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n3JfsaRQ3oIV"
      },
      "source": [
        "### Building your model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dt2av1I03oIV"
      },
      "source": [
        "**Model definition**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "AqWXprTo3oIW"
      },
      "outputs": [],
      "source": [
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = keras.Sequential([\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(1, activation=\"sigmoid\")\n",
        "])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u_JkFwh83oIW"
      },
      "source": [
        "**Compiling the model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q3kE2ptE3oIW"
      },
      "outputs": [],
      "source": [
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"binary_crossentropy\",\n",
        "              metrics=[\"accuracy\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LIxbv6J23oIW"
      },
      "source": [
        "### Validating your approach"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t8-UmrlV3oIW"
      },
      "source": [
        "**Setting aside a validation set**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8HbeGW-j3oIX"
      },
      "outputs": [],
      "source": [
        "x_val = x_train[:10000]\n",
        "partial_x_train = x_train[10000:]\n",
        "y_val = y_train[:10000]\n",
        "partial_y_train = y_train[10000:]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WXb7wO_W3oIX"
      },
      "source": [
        "**Training your model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2cLGseqi3oIX"
      },
      "outputs": [],
      "source": [
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yTUyn5Vf3oIX"
      },
      "outputs": [],
      "source": [
        "history_dict = history.history\n",
        "history_dict.keys()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y4OG0gGJ3oIX"
      },
      "source": [
        "**Plotting the training and validation loss**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "r2co6rVZ3oIX",
        "outputId": "56d11b28-fd9e-408f-8a89-dfa575d10f76",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "history_dict = history.history\n",
        "loss_values = history_dict[\"loss\"]\n",
        "val_loss_values = history_dict[\"val_loss\"]\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "plt.plot(epochs, loss_values, \"bo\", label=\"Training loss\")\n",
        "plt.plot(epochs, val_loss_values, \"b\", label=\"Validation loss\")\n",
        "plt.title(\"Training and validation loss\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VOKC5qE93oIX"
      },
      "source": [
        "**Plotting the training and validation accuracy**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5492vnlY3oIY"
      },
      "outputs": [],
      "source": [
        "plt.clf()\n",
        "acc = history_dict[\"accuracy\"]\n",
        "val_acc = history_dict[\"val_accuracy\"]\n",
        "plt.plot(epochs, acc, \"bo\", label=\"Training acc\")\n",
        "plt.plot(epochs, val_acc, \"b\", label=\"Validation acc\")\n",
        "plt.title(\"Training and validation accuracy\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EIyE6a1u3oIY"
      },
      "source": [
        "**Retraining a model from scratch**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "exHC0WS73oIY"
      },
      "outputs": [],
      "source": [
        "model = keras.Sequential([\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(1, activation=\"sigmoid\")\n",
        "])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"binary_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "model.fit(x_train, y_train, epochs=4, batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uzGBiXAO3oIY"
      },
      "outputs": [],
      "source": [
        "results"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OSslPE3J3oIY"
      },
      "source": [
        "### Using a trained model to generate predictions on new data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eoFlIpYK3oIY"
      },
      "outputs": [],
      "source": [
        "model.predict(x_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8Lb6_Vp63oIZ"
      },
      "source": [
        "### Further experiments"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uP_WMoOh3oIZ"
      },
      "source": [
        "### Wrapping up"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tnjksxr43oIZ"
      },
      "source": [
        "## Classifying newswires: A multiclass classification example"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nCfrC7c13oId"
      },
      "source": [
        "### The Reuters dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NCanWilO3oId"
      },
      "source": [
        "**Loading the Reuters dataset**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B3hY3_673oIe"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.datasets import reuters\n",
        "(train_data, train_labels), (test_data, test_labels) = reuters.load_data(\n",
        "    num_words=10000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4C1fX0bn3oIe"
      },
      "outputs": [],
      "source": [
        "len(train_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cwMvMPhK3oIe"
      },
      "outputs": [],
      "source": [
        "len(test_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EwFDblSg3oIe"
      },
      "outputs": [],
      "source": [
        "train_data[10]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lC2i4YB63oIe"
      },
      "source": [
        "**Decoding newswires back to text**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SLGQ4yc23oIe"
      },
      "outputs": [],
      "source": [
        "word_index = reuters.get_word_index()\n",
        "reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n",
        "decoded_newswire = \" \".join([reverse_word_index.get(i - 3, \"?\") for i in\n",
        "    train_data[0]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LmIlOUwC3oIf"
      },
      "outputs": [],
      "source": [
        "train_labels[10]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EIMXASMn3oIf"
      },
      "source": [
        "### Preparing the data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1lMTsyS83oIf"
      },
      "source": [
        "**Encoding the input data**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Qja-6bW53oIf"
      },
      "outputs": [],
      "source": [
        "x_train = vectorize_sequences(train_data)\n",
        "x_test = vectorize_sequences(test_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7RU7MUfY3oIf"
      },
      "source": [
        "**Encoding the labels**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tlZWIeTm3oIf"
      },
      "outputs": [],
      "source": [
        "def to_one_hot(labels, dimension=46):\n",
        "    results = np.zeros((len(labels), dimension))\n",
        "    for i, label in enumerate(labels):\n",
        "        results[i, label] = 1.\n",
        "    return results\n",
        "y_train = to_one_hot(train_labels)\n",
        "y_test = to_one_hot(test_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vz8U9s9o3oIg"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.utils import to_categorical\n",
        "y_train = to_categorical(train_labels)\n",
        "y_test = to_categorical(test_labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IQ43L1xE3oIg"
      },
      "source": [
        "### Building your model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dHAtAnNH3oIg"
      },
      "source": [
        "**Model definition**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xzo0Ba_b3oIg"
      },
      "outputs": [],
      "source": [
        "model = keras.Sequential([\n",
        "    layers.Dense(64, activation=\"relu\"),\n",
        "    layers.Dense(64, activation=\"relu\"),\n",
        "    layers.Dense(46, activation=\"softmax\")\n",
        "])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NeFfqoKZ3oIg"
      },
      "source": [
        "**Compiling the model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1o2vxlUr3oIg"
      },
      "outputs": [],
      "source": [
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rE3vTVHf3oIg"
      },
      "source": [
        "### Validating your approach"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9_PRwed33oIh"
      },
      "source": [
        "**Setting aside a validation set**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "x57nZjG73oIh"
      },
      "outputs": [],
      "source": [
        "x_val = x_train[:1000]\n",
        "partial_x_train = x_train[1000:]\n",
        "y_val = y_train[:1000]\n",
        "partial_y_train = y_train[1000:]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XKYNGze33oIh"
      },
      "source": [
        "**Training the model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "U79FytH03oIh"
      },
      "outputs": [],
      "source": [
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J7QxM6yW3oIh"
      },
      "source": [
        "**Plotting the training and validation loss**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "5mOoHMkU3oIh",
        "outputId": "13408977-97a4-4c02-ee2b-899dc034705d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        }
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'plt' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-15-b2c28b7fcc1b>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mval_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"val_loss\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"bo\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Training loss\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_loss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Validation loss\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Training and validation loss\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
          ]
        }
      ],
      "source": [
        "loss = history.history[\"loss\"]\n",
        "val_loss = history.history[\"val_loss\"]\n",
        "epochs = range(1, len(loss) + 1)\n",
        "plt.plot(epochs, loss, \"bo\", label=\"Training loss\")\n",
        "plt.plot(epochs, val_loss, \"b\", label=\"Validation loss\")\n",
        "plt.title(\"Training and validation loss\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g41ITp-63oIi"
      },
      "source": [
        "**Plotting the training and validation accuracy**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tuS4NuIo3oIi"
      },
      "outputs": [],
      "source": [
        "plt.clf()\n",
        "acc = history.history[\"accuracy\"]\n",
        "val_acc = history.history[\"val_accuracy\"]\n",
        "plt.plot(epochs, acc, \"bo\", label=\"Training accuracy\")\n",
        "plt.plot(epochs, val_acc, \"b\", label=\"Validation accuracy\")\n",
        "plt.title(\"Training and validation accuracy\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vN1gsYdm3oIi"
      },
      "source": [
        "**Retraining a model from scratch**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KwBtQ5Z43oIi"
      },
      "outputs": [],
      "source": [
        "model = keras.Sequential([\n",
        "  layers.Dense(64, activation=\"relu\"),\n",
        "  layers.Dense(64, activation=\"relu\"),\n",
        "  layers.Dense(46, activation=\"softmax\")\n",
        "])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "model.fit(x_train,\n",
        "          y_train,\n",
        "          epochs=9,\n",
        "          batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BqlcdXfj3oIi"
      },
      "outputs": [],
      "source": [
        "results"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0biNPKdq3oIi"
      },
      "outputs": [],
      "source": [
        "import copy\n",
        "test_labels_copy = copy.copy(test_labels)\n",
        "np.random.shuffle(test_labels_copy)\n",
        "hits_array = np.array(test_labels) == np.array(test_labels_copy)\n",
        "hits_array.mean()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WdSrJd7Z3oIj"
      },
      "source": [
        "### Generating predictions on new data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BMMY4qSO3oIj"
      },
      "outputs": [],
      "source": [
        "predictions = model.predict(x_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Qd2Yapqi3oIj"
      },
      "outputs": [],
      "source": [
        "predictions[0].shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DiMRzI7z3oIj"
      },
      "outputs": [],
      "source": [
        "np.sum(predictions[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KZgrxszW3oIj"
      },
      "outputs": [],
      "source": [
        "np.argmax(predictions[0])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "stHcbO1c3oIj"
      },
      "source": [
        "### A different way to handle the labels and the loss"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OYOBHMxG3oIk"
      },
      "outputs": [],
      "source": [
        "y_train = np.array(train_labels)\n",
        "y_test = np.array(test_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "10oAV2qN3oIk"
      },
      "outputs": [],
      "source": [
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"sparse_categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IN1G_mrV3oIk"
      },
      "source": [
        "### The importance of having sufficiently large intermediate layers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hk4zxoZ23oIk"
      },
      "source": [
        "**A model with an information bottleneck**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KarfGIpa3oIk"
      },
      "outputs": [],
      "source": [
        "model = keras.Sequential([\n",
        "    layers.Dense(64, activation=\"relu\"),\n",
        "    layers.Dense(4, activation=\"relu\"),\n",
        "    layers.Dense(46, activation=\"softmax\")\n",
        "])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "model.fit(partial_x_train,\n",
        "          partial_y_train,\n",
        "          epochs=20,\n",
        "          batch_size=128,\n",
        "          validation_data=(x_val, y_val))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aF9iAe123oIk"
      },
      "source": [
        "### Further experiments"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "heC8xki93oIl"
      },
      "source": [
        "### Wrapping up"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xbnpEaYS3oIl"
      },
      "source": [
        "## Predicting house prices: A regression example"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3BOfw-mO3oIl"
      },
      "source": [
        "### The Boston Housing Price dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XQDOtTlt3oIl"
      },
      "source": [
        "**Loading the Boston housing dataset**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "WRGdX_T33oIl",
        "outputId": "fe6876cf-1ec3-4ff3-f357-12df3d597980",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/boston_housing.npz\n",
            "57026/57026 [==============================] - 0s 0us/step\n"
          ]
        }
      ],
      "source": [
        "from tensorflow.keras.datasets import boston_housing\n",
        "(train_data, train_targets), (test_data, test_targets) = boston_housing.load_data()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "mOMawPgf3oIl",
        "outputId": "e484ebc0-6d06-40e7-8e73-93fe6c5828f3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(404, 13)"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "train_data.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "meeRexml3oIq",
        "outputId": "b70592a5-0ca1-4b55-d3de-3c7734830993",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(102, 13)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "test_data.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "ctpGmtZo3oIq",
        "outputId": "4d098dcb-1870-416a-9d25-210c0b24446c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([15.2, 42.3, 50. , 21.1, 17.7, 18.5, 11.3, 15.6, 15.6, 14.4, 12.1,\n",
              "       17.9, 23.1, 19.9, 15.7,  8.8, 50. , 22.5, 24.1, 27.5, 10.9, 30.8,\n",
              "       32.9, 24. , 18.5, 13.3, 22.9, 34.7, 16.6, 17.5, 22.3, 16.1, 14.9,\n",
              "       23.1, 34.9, 25. , 13.9, 13.1, 20.4, 20. , 15.2, 24.7, 22.2, 16.7,\n",
              "       12.7, 15.6, 18.4, 21. , 30.1, 15.1, 18.7,  9.6, 31.5, 24.8, 19.1,\n",
              "       22. , 14.5, 11. , 32. , 29.4, 20.3, 24.4, 14.6, 19.5, 14.1, 14.3,\n",
              "       15.6, 10.5,  6.3, 19.3, 19.3, 13.4, 36.4, 17.8, 13.5, 16.5,  8.3,\n",
              "       14.3, 16. , 13.4, 28.6, 43.5, 20.2, 22. , 23. , 20.7, 12.5, 48.5,\n",
              "       14.6, 13.4, 23.7, 50. , 21.7, 39.8, 38.7, 22.2, 34.9, 22.5, 31.1,\n",
              "       28.7, 46. , 41.7, 21. , 26.6, 15. , 24.4, 13.3, 21.2, 11.7, 21.7,\n",
              "       19.4, 50. , 22.8, 19.7, 24.7, 36.2, 14.2, 18.9, 18.3, 20.6, 24.6,\n",
              "       18.2,  8.7, 44. , 10.4, 13.2, 21.2, 37. , 30.7, 22.9, 20. , 19.3,\n",
              "       31.7, 32. , 23.1, 18.8, 10.9, 50. , 19.6,  5. , 14.4, 19.8, 13.8,\n",
              "       19.6, 23.9, 24.5, 25. , 19.9, 17.2, 24.6, 13.5, 26.6, 21.4, 11.9,\n",
              "       22.6, 19.6,  8.5, 23.7, 23.1, 22.4, 20.5, 23.6, 18.4, 35.2, 23.1,\n",
              "       27.9, 20.6, 23.7, 28. , 13.6, 27.1, 23.6, 20.6, 18.2, 21.7, 17.1,\n",
              "        8.4, 25.3, 13.8, 22.2, 18.4, 20.7, 31.6, 30.5, 20.3,  8.8, 19.2,\n",
              "       19.4, 23.1, 23. , 14.8, 48.8, 22.6, 33.4, 21.1, 13.6, 32.2, 13.1,\n",
              "       23.4, 18.9, 23.9, 11.8, 23.3, 22.8, 19.6, 16.7, 13.4, 22.2, 20.4,\n",
              "       21.8, 26.4, 14.9, 24.1, 23.8, 12.3, 29.1, 21. , 19.5, 23.3, 23.8,\n",
              "       17.8, 11.5, 21.7, 19.9, 25. , 33.4, 28.5, 21.4, 24.3, 27.5, 33.1,\n",
              "       16.2, 23.3, 48.3, 22.9, 22.8, 13.1, 12.7, 22.6, 15. , 15.3, 10.5,\n",
              "       24. , 18.5, 21.7, 19.5, 33.2, 23.2,  5. , 19.1, 12.7, 22.3, 10.2,\n",
              "       13.9, 16.3, 17. , 20.1, 29.9, 17.2, 37.3, 45.4, 17.8, 23.2, 29. ,\n",
              "       22. , 18. , 17.4, 34.6, 20.1, 25. , 15.6, 24.8, 28.2, 21.2, 21.4,\n",
              "       23.8, 31. , 26.2, 17.4, 37.9, 17.5, 20. ,  8.3, 23.9,  8.4, 13.8,\n",
              "        7.2, 11.7, 17.1, 21.6, 50. , 16.1, 20.4, 20.6, 21.4, 20.6, 36.5,\n",
              "        8.5, 24.8, 10.8, 21.9, 17.3, 18.9, 36.2, 14.9, 18.2, 33.3, 21.8,\n",
              "       19.7, 31.6, 24.8, 19.4, 22.8,  7.5, 44.8, 16.8, 18.7, 50. , 50. ,\n",
              "       19.5, 20.1, 50. , 17.2, 20.8, 19.3, 41.3, 20.4, 20.5, 13.8, 16.5,\n",
              "       23.9, 20.6, 31.5, 23.3, 16.8, 14. , 33.8, 36.1, 12.8, 18.3, 18.7,\n",
              "       19.1, 29. , 30.1, 50. , 50. , 22. , 11.9, 37.6, 50. , 22.7, 20.8,\n",
              "       23.5, 27.9, 50. , 19.3, 23.9, 22.6, 15.2, 21.7, 19.2, 43.8, 20.3,\n",
              "       33.2, 19.9, 22.5, 32.7, 22. , 17.1, 19. , 15. , 16.1, 25.1, 23.7,\n",
              "       28.7, 37.2, 22.6, 16.4, 25. , 29.8, 22.1, 17.4, 18.1, 30.3, 17.5,\n",
              "       24.7, 12.6, 26.5, 28.7, 13.3, 10.4, 24.4, 23. , 20. , 17.8,  7. ,\n",
              "       11.8, 24.4, 13.8, 19.4, 25.2, 19.4, 19.4, 29.1])"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "train_targets"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XMiWDPcn3oIr"
      },
      "source": [
        "### Preparing the data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IP41zsCG3oIr"
      },
      "source": [
        "**Normalizing the data**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "1IdnyCSm3oIr"
      },
      "outputs": [],
      "source": [
        "mean = train_data.mean(axis=0)\n",
        "train_data -= mean\n",
        "std = train_data.std(axis=0)\n",
        "train_data /= std\n",
        "test_data -= mean\n",
        "test_data /= std"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0JymXvNA3oIr"
      },
      "source": [
        "### Building your model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uTdKQLws3oIs"
      },
      "source": [
        "**Model definition**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "Jrkp34ia3oIs"
      },
      "outputs": [],
      "source": [
        "def build_model():\n",
        "    model = keras.Sequential([\n",
        "        layers.Dense(64, activation=\"relu\"),\n",
        "        layers.Dense(64, activation=\"relu\"),\n",
        "        layers.Dense(1)\n",
        "    ])\n",
        "    model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n",
        "    return model"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: Try varying the number of layers in the model\n",
        "\n",
        "def build_model(num_layers):\n",
        "    model = keras.Sequential()\n",
        "    for _ in range(num_layers):\n",
        "        model.add(layers.Dense(64, activation=\"relu\"))\n",
        "    model.add(layers.Dense(1))\n",
        "    model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n",
        "    return model\n"
      ],
      "metadata": {
        "id": "Ca4to1ng4BkZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: Try varying the number of units per layer\n",
        "\n",
        "# Create a list of models with different number of units per layer\n",
        "models = []\n",
        "for num_units in [16, 32, 64, 128]:\n",
        "  model = keras.Sequential()\n",
        "  model.add(layers.Dense(num_units, activation=\"relu\"))\n",
        "  model.add(layers.Dense(1))\n",
        "  model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n",
        "  models.append(model)\n",
        "\n",
        "# Train and evaluate each model\n",
        "for model in models:\n",
        "  model.fit(train_data, train_targets, epochs=50, batch_size=16)\n",
        "  test_mse_score, test_mae_score = model.evaluate(test_data, test_targets)\n",
        "  print(f\"Number of units per layer: {num_units}\")\n",
        "  print(f\"Test MSE: {test_mse_score:.2f}\")\n",
        "  print(f\"Test MAE: {test_mae_score:.2f}\")\n",
        "  print(\"---\")\n"
      ],
      "metadata": {
        "id": "HCCMzW-F4YjP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: Try to visualize results (validation accuracy or validation loss) for comparison\n",
        "\n",
        "# Create the figure\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot the validation accuracy for each model\n",
        "for i, model in enumerate(models):\n",
        "  history = model.history\n",
        "  plt.plot(history.history['val_accuracy'], label=f\"Model {i+1}\")\n",
        "\n",
        "# Add labels and title\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Validation Accuracy')\n",
        "plt.title('Validation Accuracy for Different Models')\n",
        "\n",
        "# Show the legend and display the plot\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "7REXwjIC4k1a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V2_gzNf73oIs"
      },
      "source": [
        "### Validating your approach using K-fold validation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XvlGdKH-3oIs"
      },
      "source": [
        "**K-fold validation**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "D1UWFaQZ3oIs",
        "outputId": "b12ab5bb-265e-4686-d04c-c2d6b516225d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Processing fold #0\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'np' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-7-e90049ac2d7d>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mval_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnum_val_samples\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnum_val_samples\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mval_targets\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_targets\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnum_val_samples\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnum_val_samples\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     partial_train_data = np.concatenate(\n\u001b[0m\u001b[1;32m     10\u001b[0m         [train_data[:i * num_val_samples],\n\u001b[1;32m     11\u001b[0m          train_data[(i + 1) * num_val_samples:]],\n",
            "\u001b[0;31mNameError\u001b[0m: name 'np' is not defined"
          ]
        }
      ],
      "source": [
        "k = 4\n",
        "num_val_samples = len(train_data) // k\n",
        "num_epochs = 100\n",
        "all_scores = []\n",
        "for i in range(k):\n",
        "    print(f\"Processing fold #{i}\")\n",
        "    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n",
        "    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n",
        "    partial_train_data = np.concatenate(\n",
        "        [train_data[:i * num_val_samples],\n",
        "         train_data[(i + 1) * num_val_samples:]],\n",
        "        axis=0)\n",
        "    partial_train_targets = np.concatenate(\n",
        "        [train_targets[:i * num_val_samples],\n",
        "         train_targets[(i + 1) * num_val_samples:]],\n",
        "        axis=0)\n",
        "    model = build_model()\n",
        "    model.fit(partial_train_data, partial_train_targets,\n",
        "              epochs=num_epochs, batch_size=16, verbose=0)\n",
        "    val_mse, val_mae = model.evaluate(val_data, val_targets, verbose=0)\n",
        "    all_scores.append(val_mae)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sdykDRJ73oIt"
      },
      "outputs": [],
      "source": [
        "all_scores"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jUgBNUpK3oIt"
      },
      "outputs": [],
      "source": [
        "np.mean(all_scores)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bxXy6O-f3oIt"
      },
      "source": [
        "**Saving the validation logs at each fold**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "dk8XgD2V3oIt",
        "outputId": "59ea28f5-b9dd-4653-b7c2-3e4224bb71f1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Processing fold #0\n",
            "Processing fold #1\n",
            "Processing fold #2\n",
            "Processing fold #3\n"
          ]
        }
      ],
      "source": [
        "num_epochs = 500\n",
        "all_mae_histories = []\n",
        "for i in range(k):\n",
        "    print(f\"Processing fold #{i}\")\n",
        "    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n",
        "    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n",
        "    partial_train_data = np.concatenate(\n",
        "        [train_data[:i * num_val_samples],\n",
        "         train_data[(i + 1) * num_val_samples:]],\n",
        "        axis=0)\n",
        "    partial_train_targets = np.concatenate(\n",
        "        [train_targets[:i * num_val_samples],\n",
        "         train_targets[(i + 1) * num_val_samples:]],\n",
        "        axis=0)\n",
        "    model = build_model()\n",
        "    history = model.fit(partial_train_data, partial_train_targets,\n",
        "                        validation_data=(val_data, val_targets),\n",
        "                        epochs=num_epochs, batch_size=16, verbose=0)\n",
        "    mae_history = history.history[\"val_mae\"]\n",
        "    all_mae_histories.append(mae_history)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0ldVrVDm3oIt"
      },
      "source": [
        "**Building the history of successive mean K-fold validation scores**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "GhGq_WoI3oIt"
      },
      "outputs": [],
      "source": [
        "average_mae_history = [\n",
        "    np.mean([x[i] for x in all_mae_histories]) for i in range(num_epochs)]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oMvPZsfr3oIu"
      },
      "source": [
        "**Plotting validation scores**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "3uyx7xSM3oIu",
        "outputId": "df3aa0ce-342d-4482-8056-c22c96865c6a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkAAAAGyCAYAAAAMKHu5AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABMEUlEQVR4nO3de1hUdf4H8PeZGWa4DyB3AUFBNE00L4Sp1WohlaWZmrFpWvlk2q/Waje7aZfN3drNrdW1y6bUtmVXzdLcTA3T8C4qqQSIgspwUZnhOsDM9/cHcnQUFBTOGZn363nO8zjnNp85lvOe7+UcSQghQERERORCNGoXQERERKQ0BiAiIiJyOQxARERE5HIYgIiIiMjlMAARERGRy2EAIiIiIpfDAEREREQuhwGIiIiIXA4DEBEREbkcndoFOCO73Y4TJ07Ax8cHkiSpXQ4RERG1ghACFRUVCA8Ph0ZziTYeoaLXXntNDBo0SHh7e4ugoCBx1113iUOHDjnsU1NTIx599FEREBAgvLy8xN133y1MJtNFz2u328ULL7wgQkNDhbu7uxg5cqT47bffWl1XYWGhAMCFCxcuXLhwuQqXwsLCS37XS0Ko9yyw0aNH495778XgwYPR0NCAZ599FllZWThw4AC8vLwAADNnzsTq1auRlpYGo9GI2bNnQ6PRYMuWLS2e969//SsWLFiADz/8EDExMXjhhRewf/9+HDhwAO7u7pesy2w2w8/PD4WFhfD19W23z0tEREQdx2KxIDIyEuXl5TAajRfdV9UAdL7S0lIEBwcjPT0dI0aMgNlsRlBQED755BPcc889AIBDhw6hd+/eyMjIwPXXX3/BOYQQCA8Px5NPPomnnnoKQGOgCQkJQVpaGu69995L1mGxWGA0GmE2mxmAiIiIrhJt+f52qkHQZrMZABAQEAAA2LVrF+rr6zFq1Ch5n169eiEqKgoZGRnNniM/Px8mk8nhGKPRiMTExBaPsVqtsFgsDgsRERF1Xk4TgOx2O5544gnccMMN6Nu3LwDAZDJBr9fDz8/PYd+QkBCYTKZmz9O0PiQkpNXHLFiwAEajUV4iIyOv8NMQERGRM3OaADRr1ixkZWVh+fLlir/33LlzYTab5aWwsFDxGoiIiEg5ThGAZs+eje+++w4bN25ERESEvD40NBR1dXUoLy932L+4uBihoaHNnqtpfXFxcauPMRgM8PX1dViIiIio81I1AAkhMHv2bKxYsQIbNmxATEyMw/aBAwfCzc0N69evl9dlZ2ejoKAASUlJzZ4zJiYGoaGhDsdYLBZs27atxWOIiIjItagagGbNmoWPP/4Yn3zyCXx8fGAymWAymVBTUwOgcfDygw8+iDlz5mDjxo3YtWsXpk2bhqSkJIcZYL169cKKFSsAAJIk4YknnsCrr76KVatWYf/+/ZgyZQrCw8MxduxYNT4mERERORlV7wS9ZMkSAMBNN93ksH7ZsmV44IEHAAALFy6ERqPB+PHjYbVakZycjH/9618O+2dnZ8szyADgj3/8I6qqqjBjxgyUl5dj2LBhWLt2bavuAURERESdn1PdB8hZ8D5AREREV5+r9j5AREREREpgACIiIiKXwwBERERELocBiIiIiFyOqrPAXE1FbT3MNfXw1OsQ4KVXuxwiIiKXxRYgBX2UcRTD/roRf/3+kNqlEBERuTQGIAVpNRIAwMY7DxAREamKAUhBWulMALIzABEREamJAUhBGg0DEBERkTNgAFKQjl1gREREToEBSEFyC5CNAYiIiEhNDEAKkscAsQWIiIhIVQxACtJxDBAREZFTYABSEAdBExEROQcGIAVpz1xtO7vAiIiIVMUApCCtpvFyN3AQNBERkaoYgBTEQdBERETOgQFIQU2PwrBzDBAREZGqGIAU1BSAGhiAiIiIVMUApCAOgiYiInIODEAK4iBoIiIi58AApKCmQdBsASIiIlIXA5CCzjQA8UaIREREKmMAUpDuTAJiACIiIlIXA5CCmgZB8z5ARERE6mIAUpBG4rPAiIiInAEDkILYBUZEROQcGIAUxEHQREREzoEBSEFNd4JmACIiIlIXA5CCdBo+DJWIiMgZMAApiIOgiYiInAMDkII4CJqIiMg5MAApiIOgiYiInAMDkIKaBkHzWWBERETqYgBSUFMAamALEBERkaoYgBTU9DR4IQDBViAiIiLVMAApqKkFCOA4ICIiIjUxACno3ADEbjAiIiL1qBqANm3ahDFjxiA8PBySJGHlypUO2yVJanZ54403Wjzn/PnzL9i/V69eHfxJWufcAMSB0EREROpRNQBVVVUhISEBixcvbnZ7UVGRw7J06VJIkoTx48df9Lx9+vRxOG7z5s0dUX6bNd0IEWALEBERkZp0ar55SkoKUlJSWtweGhrq8Pqbb77BzTffjO7du1/0vDqd7oJjnYHu3BYgBiAiIiLVXDVjgIqLi7F69Wo8+OCDl9w3JycH4eHh6N69O1JTU1FQUKBAhZfGQdBERETOQdUWoLb48MMP4ePjg7vvvvui+yUmJiItLQ3x8fEoKirCSy+9hOHDhyMrKws+Pj7NHmO1WmG1WuXXFoulXWtv0jgmqXEaPAMQERGReq6aALR06VKkpqbC3d39ovud26XWr18/JCYmolu3bvj8889bbD1asGABXnrppXattyU6jYR6m+AT4YmIiFR0VXSB/fzzz8jOzsZDDz3U5mP9/PzQs2dP5ObmtrjP3LlzYTab5aWwsPBKyr0oPhGeiIhIfVdFAPrggw8wcOBAJCQktPnYyspK5OXlISwsrMV9DAYDfH19HZaO0jQQmgGIiIhIPaoGoMrKSmRmZiIzMxMAkJ+fj8zMTIdByxaLBV988UWLrT8jR47EokWL5NdPPfUU0tPTceTIEfzyyy8YN24ctFotJk+e3KGfpbU0DEBERESqU3UM0M6dO3HzzTfLr+fMmQMAmDp1KtLS0gAAy5cvhxCixQCTl5eHsrIy+fWxY8cwefJknDx5EkFBQRg2bBi2bt2KoKCgjvsgbaBlACIiIlKdJPhUzgtYLBYYjUaYzeZ27w4b9Oo6lFXWYe0Tw9ErtOO62oiIiFxNW76/r4oxQJ0JB0ETERGpjwFIYewCIyIiUh8DkMIYgIiIiNTHAKSwpgDEp8ETERGphwFIYdozY4AabAxAREREamEAUpjcBcYWICIiItUwACmMY4CIiIjUxwCkME6DJyIiUh8DkMJ0Wg6CJiIiUhsDkMI0HARNRESkOgYghek4DZ6IiEh1DEAKO/s0eJULISIicmEMQAqT7wNkZwIiIiJSCwOQwjgImoiISH0MQArjIGgiIiL1MQApjM8CIyIiUh8DkMK0HARNRESkOgYghWnlO0EzAREREamFAUhhfBYYERGR+hiAFHb2afAqF0JEROTCGIAUdrYFiF1gREREamEAUtjZp8GrXAgREZELYwBSmI4tQERERKpjAFIYnwVGRESkPgYghcktQLwRIhERkWoYgBTGQdBERETqYwBSGAdBExERqY8BSGHaM1eczwIjIiJSDwOQwppagOy8EzQREZFqGIAUpuEgaCIiItUxAClMyxYgIiIi1TEAKYwtQEREROpjAFKYlrPAiIiIVMcApDB5Fhi7wIiIiFTDAKQwdoERERGpjwFIYRwETUREpD4GIIU1PQqDN0IkIiJSDwOQwqSmQdDMP0RERKphAFKYtjH/sAuMiIhIRaoGoE2bNmHMmDEIDw+HJElYuXKlw/YHHngAkiQ5LKNHj77keRcvXozo6Gi4u7sjMTER27dv76BP0HZnnwbPAERERKQWVQNQVVUVEhISsHjx4hb3GT16NIqKiuTl008/veg5P/vsM8yZMwfz5s3D7t27kZCQgOTkZJSUlLR3+ZeFs8CIiIjUp1PzzVNSUpCSknLRfQwGA0JDQ1t9zjfffBMPP/wwpk2bBgB45513sHr1aixduhTPPPPMFdXbHjgLjIiISH1OPwbop59+QnBwMOLj4zFz5kycPHmyxX3r6uqwa9cujBo1Sl6n0WgwatQoZGRktHic1WqFxWJxWDoKW4CIiIjU59QBaPTo0fjoo4+wfv16/PWvf0V6ejpSUlJgs9ma3b+srAw2mw0hISEO60NCQmAymVp8nwULFsBoNMpLZGRku36Oc519FAYDEBERkVpU7QK7lHvvvVf+87XXXot+/fqhR48e+OmnnzBy5Mh2e5+5c+dizpw58muLxdJhIahpEDQbgIiIiNTj1C1A5+vevTsCAwORm5vb7PbAwEBotVoUFxc7rC8uLr7oOCKDwQBfX1+HpaNoOAuMiIhIdVdVADp27BhOnjyJsLCwZrfr9XoMHDgQ69evl9fZ7XasX78eSUlJSpV5UWfyD8cAERERqUjVAFRZWYnMzExkZmYCAPLz85GZmYmCggJUVlbi6aefxtatW3HkyBGsX78ed911F2JjY5GcnCyfY+TIkVi0aJH8es6cOXj//ffx4Ycf4uDBg5g5cyaqqqrkWWFq4ywwIiIi9ak6Bmjnzp24+eab5ddN43CmTp2KJUuWYN++ffjwww9RXl6O8PBw3HrrrXjllVdgMBjkY/Ly8lBWVia/njRpEkpLS/Hiiy/CZDKhf//+WLt27QUDo9XCWWBERETqk4TgN/H5LBYLjEYjzGZzu48H+vFAMR76aCcSIoz4Zvawdj03ERGRK2vL9/dVNQaoM9CyBYiIiEh1DEAKOzsLTOVCiIiIXBgDkMKaBkGz55GIiEg9DEAK05y54rwPEBERkXoYgBSmkTgGiIiISG0MQAprGgTN+wARERGphwFIYWwBIiIiUh8DkMLOtgCpXAgREZELYwBSWNMsMA6CJiIiUg8DkMLkWWDsAiMiIlINA5DCOAiaiIhIfQxACpOfBs8WICIiItUwACns7KMwGICIiIjUwgCkMI3cAqRyIURERC6MAUhhnAVGRESkPgYghXEWGBERkfoYgBTGWWBERETqYwBSmJaPwiAiIlIdA5DCmmaBCQEIhiAiIiJVMAAprKkFCOBMMCIiIrUwACmsqQUI4EwwIiIitTAAKeyc/MO7QRMREamEAUhhWrYAERERqY4BSGGac8YAcSYYERGROhiAFHZuCxDvBURERKSOVgeg119/HTU1NfLrLVu2wGq1yq8rKirw6KOPtm91ndC5s8DYBUZERKSOVgeguXPnoqKiQn6dkpKC48ePy6+rq6vx7rvvtm91nZDDLDB2gREREami1QHo/Jv28SZ+l097zs0QiYiISHkcA6QCPhGeiIhIXQxAKpCfCM8AREREpApdW3b+97//DW9vbwBAQ0MD0tLSEBgYCAAO44Po4pqmwvNGiEREROpodQCKiorC+++/L78ODQ3Ff/7znwv2oUtjFxgREZG6Wh2Ajhw50oFluJammWBsASIiIlJHu40BKi8vx6JFi9rrdJ1a0ywwm13lQoiIiFzUFQeg9evX47777kNYWBjmzZvXHjV1ehp2gREREanqsgJQYWEhXn75ZcTExODWW2+FJElYsWIFTCZTe9fXKWnPXHV2gREREamj1QGovr4eX3zxBZKTkxEfH4/MzEy88cYb0Gg0eO655zB69Gi4ubl1ZK2dhpazwIiIiFTV6kHQXbt2Ra9evfD73/8ey5cvh7+/PwBg8uTJHVZcZ6XRsAuMiIhITa1uAWpoaIAkSZAkCVqttl3efNOmTRgzZgzCw8MhSRJWrlwpb6uvr8ef/vQnXHvttfDy8kJ4eDimTJmCEydOXPSc8+fPl+tsWnr16tUu9bYXLWeBERERqarVAejEiROYMWMGPv30U4SGhmL8+PFYsWIFpHOebt5WVVVVSEhIwOLFiy/YVl1djd27d+OFF17A7t278fXXXyM7Oxt33nnnJc/bp08fFBUVycvmzZsvu8aOcHYQtMqFEBERuahWd4G5u7sjNTUVqampyMvLw7Jly/B///d/aGhowJ///Gc88MAD+N3vftem1qGUlBSkpKQ0u81oNGLdunUO6xYtWoQhQ4agoKDgojdd1Ol0CA0NbXUdSmt6IDy7wIiIiNRxWbPAevTogVdffRVHjx7F6tWrYbVacccddyAkJKS963NgNpshSRL8/Pwuul9OTg7Cw8PRvXt3pKamoqCg4KL7W61WWCwWh6UjsQuMiIhIXVd0HyCNRoOUlBR8+eWXOHbsGJ599tn2qusCtbW1+NOf/oTJkyfD19e3xf0SExORlpaGtWvXYsmSJcjPz8fw4cMv+qyyBQsWwGg0yktkZGRHfAQZ7wNERESkrna7E3RQUBDmzJnTXqdzUF9fj4kTJ0IIgSVLllx035SUFEyYMAH9+vVDcnIy1qxZg/Lycnz++ectHjN37lyYzWZ5KSwsbO+P4IAtQEREROpq9Rig7t27t2q/w4cPX3YxzWkKP0ePHsWGDRsu2vrTHD8/P/Ts2RO5ubkt7mMwGGAwGK601FZjACIiIlJXmx6G2q1bN9x3330IDg7uyJpkTeEnJycHGzduRJcuXdp8jsrKSuTl5eH+++/vgAovD2eBERERqavVAeizzz7D0qVL8eabbyIlJQXTp0/HbbfdBo3m8nvRKisrHVpm8vPzkZmZiYCAAISFheGee+7B7t278d1338Fms8mP2ggICIBerwcAjBw5EuPGjcPs2bMBAE899RTGjBmDbt264cSJE5g3bx60Wq1T3bBRyxshEhERqarV6WXChAn4/vvvkZubi4EDB+IPf/gDIiMj8cwzzyAnJ+ey3nznzp0YMGAABgwYAACYM2cOBgwYgBdffBHHjx/HqlWrcOzYMfTv3x9hYWHy8ssvv8jnyMvLQ1lZmfz62LFjmDx5MuLj4zFx4kR06dIFW7duRVBQ0GXV2BGapsGzC4yIiEgdkhCX/y2cnp6O+fPnY9OmTSgrK5Mfj3G1s1gsMBqNMJvNbR5z1BqT3s3AtvxT+OfkARiTEN7u5yciInJFbfn+bnUX2Llqa2vx5ZdfYunSpdi2bRsmTJgAT0/PyyrWFXEQNBERkbraFIC2bduGDz74AJ9//jm6d++O6dOn46uvvuo0LT9K4RggIiIidbU6APXp0wclJSW47777kJ6ejoSEhI6sq1PjjRCJiIjU1eoAdPDgQXh5eeGjjz7Cf/7znxb3O3XqVLsU1pk1tQCxB4yIiEgdrQ5Ay5Yt68g6XIrcAsQEREREpIpWB6CpU6d2ZB0uRXvm5gPsAiMiIlJHuz0LjFqPs8CIiIjUxQCkAomDoImIiFTFAKQCLQMQERGRqhiAVMAuMCIiInUxAKmAT4MnIiJSV5sfhWGz2ZCWlob169ejpKQEdrvjt/iGDRvarbjOqmkWGFuAiIiI1NHmAPT4448jLS0Nt99+O/r27SsP6KXWk7vAOAaIiIhIFW0OQMuXL8fnn3+O2267rSPqcQm8ESIREZG62jwGSK/XIzY2tiNqcRlsASIiIlJXmwPQk08+ibfeeguCrReXjS1ARERE6mpzF9jmzZuxceNGfP/99+jTpw/c3Nwctn/99dftVlxnxVlgRERE6mpzAPLz88O4ceM6ohaXwVlgRERE6mpzAOJT4a+cRsM7QRMREampzQGoSWlpKbKzswEA8fHxCAoKareiOrumR2GwBYiIiEgdbR4EXVVVhenTpyMsLAwjRozAiBEjEB4ejgcffBDV1dUdUWOnw1lgRERE6mpzAJozZw7S09Px7bffory8HOXl5fjmm2+Qnp6OJ598siNq7HQ4C4yIiEhdbe4C++qrr/Dll1/ipptuktfddttt8PDwwMSJE7FkyZL2rK9T0mo4C4yIiEhNbW4Bqq6uRkhIyAXrg4OD2QXWSuwCIyIiUlebA1BSUhLmzZuH2tpaeV1NTQ1eeuklJCUltWtxnVXT49PYBUZERKSONneBvfXWW0hOTkZERAQSEhIAAHv37oW7uzv+97//tXuBnZE8C4wtQERERKpocwDq27cvcnJy8N///heHDh0CAEyePBmpqanw8PBo9wI7I3kMEFuAiIiIVHFZ9wHy9PTEww8/3N61uAyNfB8glQshIiJyUa0KQKtWrUJKSgrc3NywatWqi+575513tkthnRkHQRMREamrVQFo7NixMJlMCA4OxtixY1vcT5Ik2Gy29qqt0+KjMIiIiNTVqgBkt9ub/TNdHi1vhEhERKSqNk+D/+ijj2C1Wi9YX1dXh48++qhdiurs5KfBswWIiIhIFW0OQNOmTYPZbL5gfUVFBaZNm9YuRXV2fBQGERGRutocgIQQkJru5HeOY8eOwWg0tktRnZ0cgNgCREREpIpWT4MfMGAAJEmCJEkYOXIkdLqzh9psNuTn52P06NEdUmRnI88CYwsQERGRKlodgJpmf2VmZiI5ORne3t7yNr1ej+joaIwfP77dC+yMNPI0eJULISIiclGtDkDz5s0DAERHR2PSpElwd3fvsKI6O84CIyIiUleb7wQ9derUjqjDpXAWGBERkbraPAjaZrPhb3/7G4YMGYLQ0FAEBAQ4LG2xadMmjBkzBuHh4ZAkCStXrnTYLoTAiy++iLCwMHh4eGDUqFHIycm55HkXL16M6OhouLu7IzExEdu3b29TXR2Ns8CIiIjU1eYA9NJLL+HNN9/EpEmTYDabMWfOHNx9993QaDSYP39+m85VVVWFhIQELF68uNntr7/+Ot5++22888472LZtG7y8vJCcnIza2toWz/nZZ59hzpw5mDdvHnbv3o2EhAQkJyejpKSkTbV1JD4Kg4iISGWijbp37y6+++47IYQQ3t7eIjc3VwghxFtvvSUmT57c1tPJAIgVK1bIr+12uwgNDRVvvPGGvK68vFwYDAbx6aeftnieIUOGiFmzZsmvbTabCA8PFwsWLGh1LWazWQAQZrO5bR+ilTYcKhbd/vSduP3tTR1yfiIiIlfUlu/vNrcAmUwmXHvttQAAb29v+aaId9xxB1avXt1uwSw/Px8mkwmjRo2S1xmNRiQmJiIjI6PZY+rq6rBr1y6HYzQaDUaNGtXiMWo4ex8glQshIiJyUW0OQBERESgqKgIA9OjRAz/88AMAYMeOHTAYDO1WmMlkAgCEhIQ4rA8JCZG3na+srAw2m61NxwCA1WqFxWJxWDpS0ywwdoERERGpo80BaNy4cVi/fj0A4LHHHsMLL7yAuLg4TJkyBdOnT2/3ApWwYMECGI1GeYmMjOzQ99OcueocBE1ERKSONk+D/8tf/iL/edKkSYiKikJGRgbi4uIwZsyYdissNDQUAFBcXIywsDB5fXFxMfr379/sMYGBgdBqtSguLnZYX1xcLJ+vOXPnzsWcOXPk1xaLpUNDkNwCxABERESkija3AJ0vKSkJc+bMadfwAwAxMTEIDQ2VW5uAxmCybds2JCUlNXuMXq/HwIEDHY6x2+1Yv359i8cAgMFggK+vr8PSkTgLjIiISF2tagFatWpVq0945513tnrfyspK5Obmyq/z8/ORmZmJgIAAREVF4YknnsCrr76KuLg4xMTE4IUXXkB4eLj8WA4AGDlyJMaNG4fZs2cDAObMmYOpU6di0KBBGDJkCP7xj3+gqqrKqZ5U3/QoDHaBERERqaNVAejcwAEAkiRBnPfl3fSEeJvN1uo337lzJ26++Wb5dVM31NSpU5GWloY//vGPqKqqwowZM1BeXo5hw4Zh7dq1Do/hyMvLQ1lZmfx60qRJKC0txYsvvgiTyYT+/ftj7dq1FwyMVtPZQdAqF0JEROSiJHF+krmEH3/8EX/605/w2muvyd1KGRkZeP755/Haa6/hlltu6ZBClWSxWGA0GmE2mzukOyzruBl3/HMzQn3dsfXZke1+fiIiIlfUlu/vNg+CfuKJJ/DOO+9g2LBh8rrk5GR4enpixowZOHjwYNsrdjF8FAYREZG62jwIOi8vD35+fhesNxqNOHLkSDuU1Plp+DBUIiIiVbU5AA0ePBhz5sxxmGpeXFyMp59+GkOGDGnX4jorLVuAiIiIVNXmALR06VIUFRUhKioKsbGxiI2NRVRUFI4fP44PPvigI2rsdDScBk9ERKSqNo8Bio2Nxb59+7Bu3TocOnQIANC7d2+MGjVKnglGF3f2RogqF0JEROSi2hyAgMYp77feeituvfXW9q7HJTTdCNHGBERERKSKVgWgt99+GzNmzIC7uzvefvvti+77f//3f+1SWGfGGyESERGpq1UBaOHChUhNTYW7uzsWLlzY4n6SJDEAtQKfBk9ERKSuVgWg/Pz8Zv9Ml4dPgyciIlLXFT8MldquqQVICFzwSBEiIiLqeK1qAWp6RldrvPnmm5ddjKvQnDNbzmYX0Gk5e46IiEhJrQpAe/bsadXJOA2+dZoGQQOcCk9ERKSGVgWgjRs3dnQdLkXrEICYgIiIiJTGMUAq0J7XBUZERETKuqwbIe7cuROff/45CgoKUFdX57Dt66+/bpfCOjPNObGTM8GIiIiU1+YWoOXLl2Po0KE4ePAgVqxYgfr6evz666/YsGEDjEZjR9TY6ZzbAsR7ARERESmvzQHotddew8KFC/Htt99Cr9fjrbfewqFDhzBx4kRERUV1RI2dzrljgNgFRkREpLw2B6C8vDzcfvvtAAC9Xo+qqipIkoQ//OEPeO+999q9wM5IkiQ0NQKxC4yIiEh5bQ5A/v7+qKioAAB07doVWVlZAIDy8nJUV1e3b3WdmEZ+HIbKhRAREbmgNg+CHjFiBNatW4drr70WEyZMwOOPP44NGzZg3bp1GDlyZEfU2ClpJQk2CE6DJyIiUkGrA1BWVhb69u2LRYsWoba2FgDw3HPPwc3NDb/88gvGjx+P559/vsMK7Ww0GgA2jgEiIiJSQ6sDUL9+/TB48GA89NBDuPfeewEAGo0GzzzzTIcV15nJT4RnCxAREZHiWj0GKD09HX369MGTTz6JsLAwTJ06FT///HNH1tapNT0Ogy1AREREymt1ABo+fDiWLl2KoqIi/POf/8SRI0dw4403omfPnvjrX/8Kk8nUkXV2Ok1T4dkCREREpLw2zwLz8vLCtGnTkJ6ejt9++w0TJkzA4sWLERUVhTvvvLMjauyUmrrAbJwFRkREpLgrehZYbGwsnn32WTz//PPw8fHB6tWr26uuTo9dYEREROq5rGeBAcCmTZuwdOlSfPXVV9BoNJg4cSIefPDB9qytU+MgaCIiIvW0KQCdOHECaWlpSEtLQ25uLoYOHYq3334bEydOhJeXV0fV2Ck1PQ2DAYiIiEh5rQ5AKSkp+PHHHxEYGIgpU6Zg+vTpiI+P78jaOjV2gREREamn1QHIzc0NX375Je644w5otdqOrMklcBYYERGRelodgFatWtWRdbgczgIjIiJSzxXNAqPLxy4wIiIi9TAAqYSzwIiIiNTDAKQStgARERGphwFIJdozV97GFiAiIiLFMQCpRO4CYwsQERGR4hiAVCLJY4BULoSIiMgFMQCpRMsxQERERKphAFJJUwBqsPNGQEREREpz+gAUHR0NSZIuWGbNmtXs/mlpaRfs6+7urnDVl6Y/Mwq6wcYWICIiIqVd9tPglbJjxw7YbDb5dVZWFm655RZMmDChxWN8fX2RnZ0tv24ab+NM3LSNNdXzVtBERESKc/oAFBQU5PD6L3/5C3r06IEbb7yxxWMkSUJoaGhHl3ZFdGdagOrZAkRERKQ4p+8CO1ddXR0+/vhjTJ8+/aKtOpWVlejWrRsiIyNx11134ddff73oea1WKywWi8PS0eQuMI4BIiIiUtxVFYBWrlyJ8vJyPPDAAy3uEx8fj6VLl+Kbb77Bxx9/DLvdjqFDh+LYsWMtHrNgwQIYjUZ5iYyM7IDqHenOdIHVNTAAERERKU0S4uq5FXFycjL0ej2+/fbbVh9TX1+P3r17Y/LkyXjllVea3cdqtcJqtcqvLRYLIiMjYTab4evre8V1N+epL/biy13H8KfRvTDzph4d8h5ERESuxGKxwGg0tur72+nHADU5evQofvzxR3z99ddtOs7NzQ0DBgxAbm5ui/sYDAYYDIYrLbFN3ORZYGwBIiIiUtpV0wW2bNkyBAcH4/bbb2/TcTabDfv370dYWFgHVXZ5OAuMiIhIPVdFALLb7Vi2bBmmTp0Knc6x0WrKlCmYO3eu/Prll1/GDz/8gMOHD2P37t34/e9/j6NHj+Khhx5SuuyLamoBquedoImIiBR3VXSB/fjjjygoKMD06dMv2FZQUACN5myOO336NB5++GGYTCb4+/tj4MCB+OWXX3DNNdcoWfIlNQ2CrucgaCIiIsVdFQHo1ltvRUtjtX/66SeH1wsXLsTChQsVqOrK6OX7ADEAERERKe2q6ALrjNgFRkREpB4GIJWwC4yIiEg9DEAqOXsnaLYAERERKY0BSCU6zZk7QXMMEBERkeIYgFTipjszBohdYERERIpjAFKJm4ZdYERERGphAFKJm453giYiIlILA5BK3HgfICIiItUwAKlEp2kKQOwCIyIiUhoDkEr07AIjIiJSDQOQStgCREREpB4GIJVwDBAREZF6GIBU0tQF1sAAREREpDgGIJWwC4yIiEg9DEAqaeoC46MwiIiIlMcApBI3LbvAiIiI1MIApJKzg6DZBUZERKQ0BiCVyA9DZQsQERGR4hiAVOKm4Y0QiYiI1MIApJKmLjC7AGx8IjwREZGiGIBUojszCBpgKxAREZHSGIBU0tQCBDAAERERKY0BSCXnBqAGzgQjIiJSFAOQSrQaCWfGQbMFiIiISGEMQCqS7wXEQdBERESKYgBSkRyAGtgCREREpCQGIBU1PQ6DXWBERETKYgBSER+HQUREpA4GIBWdDUBsASIiIlISA5CK2AVGRESkDgYgFbm7aQEANfU2lSshIiJyLQxAKvLUNwag6joGICIiIiUxAKnIU68DANQwABERESmKAUhFTV1gbAEiIiJSFgOQis52gTWoXAkREZFrYQBSUVMAYhcYERGRshiAVOTR1ALEWWBERESKYgBSEVuAiIiI1OHUAWj+/PmQJMlh6dWr10WP+eKLL9CrVy+4u7vj2muvxZo1axSqtu2aZoFxDBAREZGynDoAAUCfPn1QVFQkL5s3b25x319++QWTJ0/Ggw8+iD179mDs2LEYO3YssrKyFKy49Tw4C4yIiEgVTh+AdDodQkND5SUwMLDFfd966y2MHj0aTz/9NHr37o1XXnkF1113HRYtWqRgxa3X1AVWyzFAREREinL6AJSTk4Pw8HB0794dqampKCgoaHHfjIwMjBo1ymFdcnIyMjIyLvoeVqsVFovFYVGCB+8ETUREpAqnDkCJiYlIS0vD2rVrsWTJEuTn52P48OGoqKhodn+TyYSQkBCHdSEhITCZTBd9nwULFsBoNMpLZGRku32Gi2EXGBERkTqcOgClpKRgwoQJ6NevH5KTk7FmzRqUl5fj888/b9f3mTt3Lsxms7wUFha26/lbwkdhEBERqUOndgFt4efnh549eyI3N7fZ7aGhoSguLnZYV1xcjNDQ0Iue12AwwGAwtFudrXX2PkCcBUZERKQkp24BOl9lZSXy8vIQFhbW7PakpCSsX7/eYd26deuQlJSkRHltxvsAERERqcOpA9BTTz2F9PR0HDlyBL/88gvGjRsHrVaLyZMnAwCmTJmCuXPnyvs//vjjWLt2Lf7+97/j0KFDmD9/Pnbu3InZs2er9REuypODoImIiFTh1F1gx44dw+TJk3Hy5EkEBQVh2LBh2Lp1K4KCggAABQUF0GjOZrihQ4fik08+wfPPP49nn30WcXFxWLlyJfr27avWR7iopi6wmnobhBCQJEnlioiIiFyDJIQQahfhbCwWC4xGI8xmM3x9fTvsfSqtDeg7738AgIMvj5YDEREREbVdW76/nboLrLNrmgYP8HEYRERESmIAUpFWI0Gva/wr4DggIiIi5TAAqczo4QYAMNfUq1wJERGR62AAUpm/Z2MAKq9mACIiIlIKA5DK/Dz1AIDT1XUqV0JEROQ6GIBUdrYFiAGIiIhIKQxAKvOXW4DYBUZERKQUBiCVsQuMiIhIeQxAKmvqAjtdxQBERESkFAYglfl7sQuMiIhIaQxAKmsaA8RB0ERERMphAFKZ3AXGFiAiIiLFMACpjIOgiYiIlMcApLKmFqCK2gbU2+wqV0NEROQaGIBU5u+ph+HMA1FPlNeoXA0REZFrYABSmUYjoVsXTwDAkZPVKldDRETkGhiAnEC3Ll4AgKMnq1SuhIiIyDUwADmB6KYWoDK2ABERESmBAcgJsAWIiIhIWQxATiAmsDEAHWEAIiIiUgQDkBOIPhOACk5Vcyo8ERGRAhiAnEC40R0+Bh3qbQKHS9kKRERE1NEYgJyAJEmID/UBABwyWVSuhoiIqPNjAHISZwNQhcqVEBERdX4MQE6iV5gvAOBQEVuAiIiIOhoDkJPoE94YgHYePY3aepvK1RAREXVuDEBOon+EH7r6eaCitgH/+9WkdjlERESdGgOQk9BoJIwfGAEA+HLXMZWrISIi6twYgJzIPdc1BqDNuWV8MjwREVEHYgByIlFdPJEYEwAhgC92shWIiIioozAAOZn7EqMAAO9uysOx03w4KhERUUdgAHIyY/qFY3C0P6rrbHhv02G1yyEiIuqUGICcjEYj4ZEbewAA1h8sgRBC5YqIiIg6HwYgJzS0RyAMOg2Ol9dge/4ptcshIiLqdBiAnJCHXosbYgMBAKn/3oYdRxiCiIiI2hMDkJN6/vbeiAv2RoNd4InlmSitsKpdEhERUafBAOSkugd5Y8WsG9CtiyeOl9dg4rsZOFlpxZe7jmFvYbna5REREV3VJMFRthewWCwwGo0wm83w9fVVtZajJ6tw3/vbcPycGyNKEjA1KRoPDotBZICnitUREZErOHa6Gos35mLmjbGI6uK83ztt+f526hagBQsWYPDgwfDx8UFwcDDGjh2L7Ozsix6TlpYGSZIcFnd3d4Uqbn/dunjhvSkDoded/asSAkj75QimLt0OS229itUREVFnI4TAu+l5eG9TnjwTee7X+/Hp9kKkfrD1gv3N1fVYuO437Dp66oLzCCHw+tpDeHt9DoQQqKitx+trD2Hiuxn4JvO4Ip+nJU7dAjR69Gjce++9GDx4MBoaGvDss88iKysLBw4cgJeXV7PHpKWl4fHHH3cISpIkISQkpNXv60wtQE0OnLDgkMmC+FAffLq9AB9vLQAABHrrMbCbP7JNFWiwC/x9QgJigrwQ7HP1hj4i6jjm6npUWOuxeGMuZozogZjA5v8tbQ97Ck4jyMeACP+ObTGoa7BjytJt8HV3w7v3D4QkSfK20gor9DoNjB5u8johBNYfLEFCpB+CfAxteq/3Nx3GryfMeO3ua+Gp1zW7jxACG7NLcPRkNW65JgRCAP5eengbmt///GOziysQ7OOOAC99Y2iwNkCv1cDdTSt/3vTfStEjyAvdg7zlY212gTfXZcNktqLK2oARPYMweUgkJElCkbkGB4ss0Go0KLHUItzPAzfEBkIIAUmSUFphRZCPATV1NmzMLsGj/90tn/em+CD8lF3qUGd0F09EBnji99d3w+trDyGvtAreBh1W/98w+Lq74bU1B7HhUAnu6t8VS7fkN/tZpyR1w8t39b3kNWmLtnx/O3UAOl9paSmCg4ORnp6OESNGNLtPWloannjiCZSXl1/2+zhjADrfrqOnMfPjXShpZnC0h5sWYweEY3B0AApP1eDO/uGI7uKJeptwaEkiItdRaW3AgRMW/P7f21BnswMAogI8semPN7d4TElFLYK8DXKgsNkFVu09Dp1Ggzv6hcnra+tt8pdzsaUW5pp61DXYMWbRZkT4e+Cnp26GVtO4b+GpamQWliOlbyh0Wg12HjkFdzct+nY1XvD+5dV1qKm3Iczo4ViXpRYAsPPoaSTGBOCQqQKp/94GAPhg6iBc370LvAw6vL72EP71Ux7ctBJevqsv4oK9MSg6AJ9uL8Dcr/cjPsQH026Ixmc7C/HkLfFYtfc4sk0VeH/KIAR6G3C8vAZBPgYcPVmNniHe+PWEBXf8czMA4JEbe6BXqA+8DDqM7BWM09V1WLHnOH49YUFmYTnyy6ocau4e5IVX7uqLskorjpfXoK7BjoraBjxyYw8E+RhQeKoa+WVV+HjrUfxwoBgAEOClh7Xehqo6G9zdNOge6A1vdx1M5loUnGp8UkCQjwHubhqUVlhRW2+/4Br2DPGGzS6QV1p1wbYpSd2wYs9xVNQ2tPjfQEf54+h4pPQNa/cA3mkDUG5uLuLi4rB//3707dt8akxLS8NDDz2Erl27wm6347rrrsNrr72GPn36tPp9roYABDT+Cvg5pxQ5JZXw1Gvx6uqDqGu48H8AANBpJGg1Ep66NR53JIThwAkLAr0NSIj0AwD8J+MIFm/Mw9uTByA+1AeV1gZ09fO44Dzm6npszT+JW3qHwGSpRW29zeEXCNG5TOZapP9WgjsTusJDr73i8wkhYG2wy1+2l6u6ruGCX++W2nroNFKLv+ovVdemnDLkFFdg+g0x0GikSx90Eb+eMKOovBYjewdDkiT8esKMact2YNoNMegV6oNlvxxBmK87wv08MLpvKLQaCbHB3th3rBwL1hzCjBHdcXOvYABAWaUVOcWVmPXJbpyqqrvgvf49ZRBujA+Cm1aDX3LLsPeYGTfFB+GQyYI/fLYXw+MCEW70wL7jZpystMo/uqYkdUNcsDfW/mrCltyTuC8xCs+k9MLohZtQXGFFn3Bf7DtmBgAsfWAQ3N20ePW7gzhQZAEA9O3qC40kyfs0/nDriuu7B+C34gokRPjh1dUH5S96H4MOXf09UFJhdfgcGgmwn/ct5qXXoou3QT72XHNTeuG9TYdxsplrca7zzzthYARySiqR2cwklGAfA6rrbKi0ng0Seq1GDpoX08VLj2vCffFzTtkl970SGgnoGeKD0grrJT870Bis7r++Gzz1WnyyvQCHS6uQGBOAMQnh2HCoBPllVRBC4MjJxmu8cFICFq7LcbjmQT4GeQZz366+aLAJVNQ24IGh0Xh4RPcO+ZydMgDZ7XbceeedKC8vx+bNm1vcLyMjAzk5OejXrx/MZjP+9re/YdOmTfj1118RERHR7DFWqxVW69mWFIvFgsjISKcPQOcrOfPLa0tuGTbnluHHgyUX3V+nkTDr5ljklFRgzX4TAKBfhBFV1gYUnqrBJw8nYlB0AIDGX20fbM7Hd/uKUFZpRfcgLxw73fgrZkCUH3oG++CeQRFIiPDD3mPl6Bnsg8LT1egT7gtJkmBtsOGdnw5Dp5Uw/roIhBpb10X3bnoe3t10GIsmD0B2cQVySioxuk8ohsUG4tt9JyAE4OOuw4iejf+AOxO7XUCjkVDXYMfjy/fgZFUd0qYNvuALtsragMLT1YgP8XFous8tqcAfv9yHm+KDMevmWPkXdGsVnvmHyN9Lj39tzMXI3iEY2M3/yj/YGef+6j9flbUBJRVW3PteBootVoztH45/3DugVee1Ntjwh88yIQTw4LAYHC+vgclci0HR/vhsRyFWZp7Af6YPweDoAJRWWvHIx7sQ3cULs38Xi+guXvJ1stsFauptOHqyGpIE9A7zhRACf//hNyzamIs3Jybg7usa/014Nz0Pf/shGz2CvPHtY8NQZW3Ad/uKcFN8ECL8PVHXYMerqw+gtt6Gl+/qC61GwuacMpRU1GLRxlwUnjo7SeH523vjzv7h8HV3g16rgUYjoby6Dr8VV+LHg8VI6tEFWklC1gkzfNzdYK23AQAi/D2QV1qFepsd/9qYhzqbHX+bkACjhxtmf7Ib1hZ+3ACAViNhdN9QrN5XJK8bkxAOPw83fLazsMUfRk16hnijV6gvVu09AQBw00qot7XfV4OHmxYNdnu7nrO14oK9caK8BlV1tnY5n4+7Dj2CvOUgpNVIsJ1JSr3DfJHSNxR9u/riuih/HD1ZjXH/2iIHqS5eenQP8oK3QQeTxYrCU9VyaJIkoGewD9z1WkwbGo0wozs2ZJcgpW8YbHY7JryTAbsAHhgajQh/D4zsHYJv957A0i35mHljDwztEYj3fj4MvVaDv46/FjqtBm/9mIOFP/6GewZG4IU7rpG7AQtPNdYFAP0j/SBJEiL8PVBeXY9pN0QjNtgbOo1G7jGw1Nbj8x2FGN031KE7s8Fmx7ubDiPIx4CJgyJRWmHFyj3HcWN8EHzd3RBqdEfWcTPqbXYMiGq/f3suplMGoJkzZ+L777/H5s2bWwwyzamvr0fv3r0xefJkvPLKK83uM3/+fLz00ksXrL/aAtD5TlZaIQCsyjyB/lF++Hr3MazZb2r2V2BzAr31uKt/VxScqsa6M02yl2L0cIO55uzA7G5dPBEX7I0jJ6uRW1IJoLFZ96HhMdBrNdhTUA67EHDTauDtrkPvUB+k/XIE0V288LvewXhuRVarP++w2ECM6h2M+5OiHcJC1nEzXl19ACUVVjw+Mg7ublqM6h2CAycsOFhkQYW1AYkxAQgzumPFnuM4WVWHLblluCk+GI/9LraxPo0GJ6vq8MLKLGQWlmPOLT0xJiEcHnotbHaBn7JLYPRwg4dei0UbclFaYUVOSSWevLUncksq8VHGUQDA08nxuKt/OIQAPttRCAD4bGeh/CvJ3U2Drn4eCPF1xy95J+XPMDwuEIsmXwejZ+M/YGuziuCh1+HGnkFyH74QAvuPm7HjyGnotRJe+vYA3LQaRAZ44LfiSni4aTF1aDQKTlXh6eReiAn0wmc7CnCyqg4pfcOwbEs+Ar0NKDLXoF+EH8YN6ApJAkosVoT4umPFnmMINXrgxp5B+HjrUTy/MgtDogMQYnSHtd6GewZGYETPILy/6TD+sT5H/lJo0jvMF7X1Nhg93DD/zj7wcNPii52F6BbohQBPPUb2Doa5ph5//yEbn+88dsm/765+Hg6zIwHgjn5h6NbFE5tzGlsyzhUX7I3SSivKq+vl4zc8dSO+3n0cc7/eL+83NakbNueWyV0GPgYddFoJp88cF+xjgJtWc8F7NyfM6A6bXTTbVX0l3LQSegR545Cpol3P25zrovxQXWfDIVMF3LQS3r1/INYdKMGn2xvHId6XGIX4EB+8tuZgsyHNx6BDxTktI8l9QjBuQFccMlUg67gF4X7ueCo5Hhl5J7F4Yy4KT1Ujwt8T+4+f/fszerjB6OGGbl08ERPohRFxQbALgRE9g3CgyIJ739uKugY7ugd5YXC3AEwaEom9heXYdfQ05tzSE5baBuw/bkZ+aRU+2X4UYUYP/HPyAIT4Nv4Q8zboMOm9DBwqqsC7UwYizOgOg06LugY7lu8owI4jp5B13AJPvRaLU6/DwG7+mL5sB7wMOrxxTz/8cKAYEf4eGB4XdMEPlf3HzPBx1yHQxwAPN63DdmuDDe9vOoyK2gbclxiFbl1a7g7adfQ0dBpJbrVv0vT/f0vM1fXyvxvnstkFJOCKWyudTacLQLNnz8Y333yDTZs2ISYmps3HT5gwATqdDp9++mmz2ztLC1BrHTJZUGVtwH+3FSC3pBLXRfnjjn5heHfT4VYHHQCYOCgCHm5alNfUY09BebPNzee70l+WccHeyCutvKDJ+1y3XRuKoT0CUddgx2/FFfg+y+QQyoDGL7Fzv5Saa0YHGr+0Syy10Os0CPZ1v+AeTFqNBJ1Guuiv8yvl4aZFTb0Nw2IDEeRjwOr9RQ6/6N3dNKittzv8Er2UyAAPDInugq92txw0gn0MqK23wXLe+IC2/h3e0S8M353TMgGg1bUGehvQPcgLfh5u2JRT2uwYh/bS0n8Dl3JTfBCEANJ/K730zmj8pa+VJDSceTN3Nw16h/kip7gSMYFeMHq44fruAdh+5DQ2nXPOpq4oPy83zBjeHb4ebpjwTgZKLLW4PykaP+eUom9XI9x1Gry9IVc+7oGh0Rh/XQQ0GiDCzxNWmw0L1/2Gkb1CUGSuwQ2xgVi25Qjyy6pwZ/9w3HZtGF5bcxC7j57G9GExmDgoEkBjl3t5dR2Cfd1RVmnFI//ZhYHR/pib0hsAkFlYjm8yjyPS3xP9o/xQeKoaw+OC0GC3Y8Xu4wjw0mNMQniruy+35Jbht+IKTDnvB01zDpdWos5mR6/QS/97XVtvg04jQXdei7G1wQZzTX2zE0jsdoHc0kp09fOAVysGMpN6Ok0AEkLgsccew4oVK/DTTz8hLi6uzeew2Wzo06cPbrvtNrz55putOuZqGQPU3ipq67F6XxHqbHbcdm0Y/v7DbyirtKJfVyMqrA24ITYQeSWVGBDlh4NFFZgwKELudjpdVYfX/3cIXnodbu4VjMNlVbgxLgh5pZU4Ya6BzS5wQ2wg/Dzc8O6mw8grqcTRU9UY2TsYlpoGmMyNTdSlFVaE+7mjorYB+46ZkRDph39M6o/MwtOID/HFNeG+WJtVhEf/uxt9uxqx4tEbsCW3DMu25MPo4YZVe080+yXWrYsnjp68MKAF+xigkSSYzgyqbNIUKs4nSY0tB8dOX/rX/7meGBWHbYdPIePwyQu2TU3qhlv7hOJgkQXD44KQW1KJA0VmrNlvwt0DumJ4zyDcs+QX+Quzte6/vhtW7y+SB1G2JMLf8fP4GHTQ6zSXHCfgqdfi0Zt6oNhiRb3NjtX7ilBhbUCQjwFDe3TBtsOn8MiN3XF/UjSe+Woffs4pw/Rh0dh55LQ8yDMm0EvuLmsS3cUTf7ilJ+7q39Xh/Sy19ThcWgWb3Y6Ve07Ay6CDQadBXIg3RvcJxbItR/DnNQfRPcgLtXU2lFRY0WAX8Dbo8M/7BkAIgRBfd/QI8sbra7PlmSl6nQYTB0Xgj6N74Zmv9mH9wRIMiQnA6/f0g5tWA3NNPaqtNoT5ueN0VR32HjPDz8MNg2MCYDLXIi7YG5LUeHuKfcfNKDxVjV1HTyPQW49wPw/8lF2KAVF+AIB7Bjb+P6M784VecKoaXbwNDjOUmgghsOFQCXzc3TCwm3+zv9btdgEBOAQEu10g/2QVfN3dkFlYjt/1Cm5z9ynR1arTBKBHH30Un3zyCb755hvEx8fL641GIzw8GgfoTpkyBV27dsWCBQsAAC+//DKuv/56xMbGory8HG+88QZWrlyJXbt24ZprrmnV+7pqAHImdQ12bD18EoOi/ZsdlHrsdDX8PC+cVvpzTinW7C9CaUUddBoJPYK90DfciJt7BWNLbhk+3V6AG+ODcbDIgmvCfJGaGAUhgOU7CvH5zkJMHxaDbgGe6BdhxPIdhVix5zhiungh3M8DX+85hnuui8Ds38WitMKKRRtzse3wKfwpJR43xAaixGKFXQh06+IlNzvnlVbi2OkajIgLRFWdDa98ewD+XnoE+xgwomcgogK8WjUz7z8ZR7BsyxHcEBsIb3cdjB6N40s89Fr4nQl+N8UHYUhMF/i661BkrkXfrkbU1Nmg0TROBX5hZRamDI1GdBcvvL0+ByUVtZg4KBJ3JoRjx5HTiPD3gEaSEOxjQE29DZtzy+Tg+v6mw/Ay6NAr1AcFp6qxt7AcD9wQjX4RfnKNtfU2nKyqk7uIWiKEwLb8Uwj01iM22AdA43inHw4UY/x1EXK3xOU4WWlFgJde7hIsr65Hvd1+wa/6BpsdBaeqEeClh7ub1qFV4lJdCkTkvDpNAGrpH6Fly5bhgQceAADcdNNNiI6ORlpaGgDgD3/4A77++muYTCb4+/tj4MCBePXVVzFgQOsGYAIMQERERFejThOA1MIAREREdPXpNI/CICIiIuoIDEBERETkchiAiIiIyOUwABEREZHLYQAiIiIil8MARERERC6HAYiIiIhcDgMQERERuRwGICIiInI5DEBERETkchiAiIiIyOUwABEREZHLYQAiIiIil6NTuwBnJIQA0PhUWSIiIro6NH1vN32PXwwDUDMqKioAAJGRkSpXQkRERG1VUVEBo9F40X0k0ZqY5GLsdjtOnDgBHx8fSJLUbue1WCyIjIxEYWEhfH192+285IjXWRm8zsrhtVYGr7MyOvI6CyFQUVGB8PBwaDQXH+XDFqBmaDQaREREdNj5fX19+T+XAnidlcHrrBxea2XwOiujo67zpVp+mnAQNBEREbkcBiAiIiJyOQxACjIYDJg3bx4MBoPapXRqvM7K4HVWDq+1MnidleEs15mDoImIiMjlsAWIiIiIXA4DEBEREbkcBiAiIiJyOQxARERE5HIYgBSyePFiREdHw93dHYmJidi+fbvaJV1VNm3ahDFjxiA8PBySJGHlypUO24UQePHFFxEWFgYPDw+MGjUKOTk5DvucOnUKqamp8PX1hZ+fHx588EFUVlYq+Cmc34IFCzB48GD4+PggODgYY8eORXZ2tsM+tbW1mDVrFrp06QJvb2+MHz8excXFDvsUFBTg9ttvh6enJ4KDg/H000+joaFByY/i9JYsWYJ+/frJN4NLSkrC999/L2/nde4Yf/nLXyBJEp544gl5Ha/1lZs/fz4kSXJYevXqJW93ymssqMMtX75c6PV6sXTpUvHrr7+Khx9+WPj5+Yni4mK1S7tqrFmzRjz33HPi66+/FgDEihUrHLb/5S9/EUajUaxcuVLs3btX3HnnnSImJkbU1NTI+4wePVokJCSIrVu3ip9//lnExsaKyZMnK/xJnFtycrJYtmyZyMrKEpmZmeK2224TUVFRorKyUt7nkUceEZGRkWL9+vVi586d4vrrrxdDhw6Vtzc0NIi+ffuKUaNGiT179og1a9aIwMBAMXfuXDU+ktNatWqVWL16tfjtt99Edna2ePbZZ4Wbm5vIysoSQvA6d4Tt27eL6Oho0a9fP/H444/L63mtr9y8efNEnz59RFFRkbyUlpbK253xGjMAKWDIkCFi1qxZ8mubzSbCw8PFggULVKzq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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.plot(range(1, len(average_mae_history) + 1), average_mae_history)\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Validation MAE\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WmvE-koG3oIu"
      },
      "source": [
        "**Plotting validation scores, excluding the first 10 data points**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "OianQ-ua3oIu",
        "outputId": "9b5e675f-1e92-4862-97e4-e712d35237ee",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "truncated_mae_history = average_mae_history[10:]\n",
        "plt.plot(range(1, len(truncated_mae_history) + 1), truncated_mae_history)\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Validation MAE\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ejZJJF-A3oIu"
      },
      "source": [
        "**Training the final model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "6BckI54u3oIu",
        "outputId": "4676ad6f-b7c4-4c70-bb07-d6ded3fedbc0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4/4 [==============================] - 0s 4ms/step - loss: 15.0686 - mae: 2.8160\n"
          ]
        }
      ],
      "source": [
        "#model = build_model()\n",
        "#model.fit(train_data, train_targets,\n",
        "         # epochs=130, batch_size=16, verbose=0)\n",
        "\n",
        "test_mse_score, test_mae_score = model.evaluate(test_data, test_targets)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "YjXBGyMH3oIv",
        "outputId": "6bff6adf-e9e7-4c71-968e-ed3421b885a6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.815971851348877"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "test_mae_score"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2HTR6-763oIv"
      },
      "source": [
        "### Generating predictions on new data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1jx_EsfT3oIv"
      },
      "outputs": [],
      "source": [
        "predictions = model.predict(test_data)\n",
        "predictions[0]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J9fI1dGF3oIv"
      },
      "source": [
        "### Wrapping up"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VVsEoXAk3oIv"
      },
      "source": [
        "## Summary"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "chapter04_getting-started-with-neural-networks.i",
      "provenance": [],
      "toc_visible": true,
      "gpuType": "T4"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.0"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}