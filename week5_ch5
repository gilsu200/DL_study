{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vwzo_QlvM6Wc"
      },
      "source": [
        "This is a companion notebook for the book [Deep Learning with Python, Second Edition](https://www.manning.com/books/deep-learning-with-python-second-edition?a_aid=keras&a_bid=76564dff). For readability, it only contains runnable code blocks and section titles, and omits everything else in the book: text paragraphs, figures, and pseudocode.\n",
        "\n",
        "**If you want to be able to follow what's going on, I recommend reading the notebook side by side with your copy of the book.**\n",
        "\n",
        "This notebook was generated for TensorFlow 2.6."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "37RYtmfzM6Wi"
      },
      "source": [
        "# Fundamentals of machine learning"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QWnUf3LoM6Wi"
      },
      "source": [
        "## Generalization: The goal of machine learning"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lVaDkBFPM6Wj"
      },
      "source": [
        "### Underfitting and overfitting"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ij1uHm6QM6Wj"
      },
      "source": [
        "#### Noisy training data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F-AFkBOUM6Wk"
      },
      "source": [
        "#### Ambiguous features"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4gjWSIGoM6Wk"
      },
      "source": [
        "#### Rare features and spurious correlations"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UbYtc6NiM6Wk"
      },
      "source": [
        "**Adding white-noise channels or all-zeros channels to MNIST**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "jEXNelxfM6Wl",
        "outputId": "5cdc252f-a27e-480c-baa5-a347816aec35",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11490434/11490434 [==============================] - 2s 0us/step\n"
          ]
        }
      ],
      "source": [
        "from tensorflow.keras.datasets import mnist\n",
        "import numpy as np\n",
        "\n",
        "(train_images, train_labels), _ = mnist.load_data()\n",
        "train_images = train_images.reshape((60000, 28 * 28))\n",
        "train_images = train_images.astype(\"float32\") / 255\n",
        "\n",
        "train_images_with_noise_channels = np.concatenate(\n",
        "    [train_images, np.random.random((len(train_images), 784))], axis=1)\n",
        "\n",
        "train_images_with_zeros_channels = np.concatenate(\n",
        "    [train_images, np.zeros((len(train_images), 784))], axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_images.shape"
      ],
      "metadata": {
        "id": "BLzNbvzqVXJY",
        "outputId": "f7ba9929-8a03-4fd8-d1fe-5329b493161a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(60000, 784)"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_images_with_noise_channels.shape"
      ],
      "metadata": {
        "id": "JX75swlDVXF9",
        "outputId": "0bb81ac4-7db6-45a4-fc26-5a0df3b1b08c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(60000, 1568)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_images_with_zeros_channels.shape"
      ],
      "metadata": {
        "id": "QETs73uRVW4C",
        "outputId": "ced66d67-72bc-4201-fe02-4d3be56d832b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(60000, 1568)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6TA5aNOLM6Wn"
      },
      "source": [
        "**Training the same model on MNIST data with noise channels or all-zero channels**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "zXYHawqcM6Wn",
        "outputId": "e52b4a64-09a9-4eda-bab4-17d9edee88bf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.6079 - accuracy: 0.8139 - val_loss: 0.2986 - val_accuracy: 0.9072\n",
            "Epoch 2/10\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.2583 - accuracy: 0.9207 - val_loss: 0.1933 - val_accuracy: 0.9426\n",
            "Epoch 3/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.1710 - accuracy: 0.9475 - val_loss: 0.1556 - val_accuracy: 0.9537\n",
            "Epoch 4/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.1222 - accuracy: 0.9629 - val_loss: 0.1494 - val_accuracy: 0.9558\n",
            "Epoch 5/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0902 - accuracy: 0.9713 - val_loss: 0.1168 - val_accuracy: 0.9656\n",
            "Epoch 6/10\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0682 - accuracy: 0.9785 - val_loss: 0.1353 - val_accuracy: 0.9604\n",
            "Epoch 7/10\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.0516 - accuracy: 0.9832 - val_loss: 0.1482 - val_accuracy: 0.9574\n",
            "Epoch 8/10\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.0376 - accuracy: 0.9884 - val_loss: 0.1954 - val_accuracy: 0.9442\n",
            "Epoch 9/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0259 - accuracy: 0.9912 - val_loss: 0.1255 - val_accuracy: 0.9664\n",
            "Epoch 10/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0213 - accuracy: 0.9937 - val_loss: 0.1547 - val_accuracy: 0.9619\n",
            "Epoch 1/10\n",
            "375/375 [==============================] - 3s 5ms/step - loss: 0.2920 - accuracy: 0.9163 - val_loss: 0.1581 - val_accuracy: 0.9540\n",
            "Epoch 2/10\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.1229 - accuracy: 0.9646 - val_loss: 0.1002 - val_accuracy: 0.9710\n",
            "Epoch 3/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0798 - accuracy: 0.9757 - val_loss: 0.0921 - val_accuracy: 0.9738\n",
            "Epoch 4/10\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0586 - accuracy: 0.9822 - val_loss: 0.0905 - val_accuracy: 0.9738\n",
            "Epoch 5/10\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0432 - accuracy: 0.9874 - val_loss: 0.0734 - val_accuracy: 0.9774\n",
            "Epoch 6/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0317 - accuracy: 0.9907 - val_loss: 0.0776 - val_accuracy: 0.9783\n",
            "Epoch 7/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0243 - accuracy: 0.9932 - val_loss: 0.0761 - val_accuracy: 0.9790\n",
            "Epoch 8/10\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0187 - accuracy: 0.9949 - val_loss: 0.0776 - val_accuracy: 0.9792\n",
            "Epoch 9/10\n",
            "375/375 [==============================] - 2s 6ms/step - loss: 0.0141 - accuracy: 0.9961 - val_loss: 0.0758 - val_accuracy: 0.9783\n",
            "Epoch 10/10\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.0105 - accuracy: 0.9975 - val_loss: 0.0766 - val_accuracy: 0.9783\n",
            "Epoch 1/10\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.2965 - accuracy: 0.9144 - val_loss: 0.1585 - val_accuracy: 0.9546\n",
            "Epoch 2/10\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.1225 - accuracy: 0.9633 - val_loss: 0.1136 - val_accuracy: 0.9642\n",
            "Epoch 3/10\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.0813 - accuracy: 0.9757 - val_loss: 0.0899 - val_accuracy: 0.9734\n",
            "Epoch 4/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0589 - accuracy: 0.9826 - val_loss: 0.0834 - val_accuracy: 0.9758\n",
            "Epoch 5/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0431 - accuracy: 0.9878 - val_loss: 0.0793 - val_accuracy: 0.9761\n",
            "Epoch 6/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0325 - accuracy: 0.9907 - val_loss: 0.0782 - val_accuracy: 0.9775\n",
            "Epoch 7/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0250 - accuracy: 0.9932 - val_loss: 0.0769 - val_accuracy: 0.9785\n",
            "Epoch 8/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0188 - accuracy: 0.9948 - val_loss: 0.0751 - val_accuracy: 0.9798\n",
            "Epoch 9/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0137 - accuracy: 0.9966 - val_loss: 0.0760 - val_accuracy: 0.9780\n",
            "Epoch 10/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0104 - accuracy: 0.9973 - val_loss: 0.0749 - val_accuracy: 0.9801\n"
          ]
        }
      ],
      "source": [
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "def get_model():\n",
        "    model = keras.Sequential([\n",
        "        layers.Dense(512, activation=\"relu\"),\n",
        "        layers.Dense(10, activation=\"softmax\")\n",
        "    ])\n",
        "    model.compile(optimizer=\"rmsprop\",\n",
        "                  loss=\"sparse_categorical_crossentropy\",\n",
        "                  metrics=[\"accuracy\"])\n",
        "    return model\n",
        "\n",
        "model = get_model()\n",
        "history_noise = model.fit(\n",
        "    train_images_with_noise_channels, train_labels,\n",
        "    epochs=10,\n",
        "    batch_size=128,\n",
        "    validation_split=0.2)\n",
        "\n",
        "model = get_model()\n",
        "history_zeros = model.fit(\n",
        "    train_images_with_zeros_channels, train_labels,\n",
        "    epochs=10,\n",
        "    batch_size=128,\n",
        "    validation_split=0.2)\n",
        "model = get_model()\n",
        "history = model.fit(\n",
        "    train_images, train_labels,\n",
        "    epochs=10,\n",
        "    batch_size=128,\n",
        "    validation_split=0.2)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: From Training the same model on MNIST data with noise channels or all-zero channels\n",
        "# Add validation accuracy of original data for mnist data.\n",
        "\n",
        "model = get_model()\n",
        "history = model.fit(\n",
        "    train_images, train_labels,\n",
        "    epochs=10,\n",
        "    batch_size=128,\n",
        "    validation_split=0.2)\n",
        "\n",
        "print(\"Validation accuracy of original data:\", history.history[\"val_accuracy\"][-1])\n"
      ],
      "metadata": {
        "id": "F_T3sRNaNd5K",
        "outputId": "31778999-737c-4db1-a30e-356c29645260",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.2992 - accuracy: 0.9133 - val_loss: 0.1674 - val_accuracy: 0.9519\n",
            "Epoch 2/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.1240 - accuracy: 0.9631 - val_loss: 0.1101 - val_accuracy: 0.9686\n",
            "Epoch 3/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0811 - accuracy: 0.9762 - val_loss: 0.0849 - val_accuracy: 0.9755\n",
            "Epoch 4/10\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.0584 - accuracy: 0.9823 - val_loss: 0.0837 - val_accuracy: 0.9758\n",
            "Epoch 5/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0431 - accuracy: 0.9873 - val_loss: 0.0821 - val_accuracy: 0.9768\n",
            "Epoch 6/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0329 - accuracy: 0.9902 - val_loss: 0.0736 - val_accuracy: 0.9790\n",
            "Epoch 7/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0249 - accuracy: 0.9931 - val_loss: 0.0784 - val_accuracy: 0.9781\n",
            "Epoch 8/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0185 - accuracy: 0.9946 - val_loss: 0.0767 - val_accuracy: 0.9794\n",
            "Epoch 9/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0137 - accuracy: 0.9966 - val_loss: 0.0710 - val_accuracy: 0.9804\n",
            "Epoch 10/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0101 - accuracy: 0.9976 - val_loss: 0.0821 - val_accuracy: 0.9784\n",
            "Validation accuracy of original data: 0.9784166812896729\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "THX73oGLM6Wn"
      },
      "source": [
        "**Plotting a validation accuracy comparison**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "-gymG0S_M6Wo",
        "outputId": "b8ee0947-bcba-4f9e-d06e-2848414ce497",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7cf15d7d1000>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "val_acc_noise = history_noise.history[\"val_accuracy\"]\n",
        "val_acc_zeros = history_zeros.history[\"val_accuracy\"]\n",
        "val_acc=history.history[\"val_accuracy\"]\n",
        "epochs = range(1, 11)\n",
        "plt.plot(epochs, val_acc_noise, \"b-\",\n",
        "         label=\"Validation accuracy with noise channels\")\n",
        "plt.plot(epochs, val_acc_zeros, \"b--\",\n",
        "         label=\"Validation accuracy with zeros channels\")\n",
        "plt.plot(epochs, val_acc, \"b--\",\n",
        "         label=\"Validation accuracy channels\")\n",
        "plt.title(\"Effect of noise channels on validation accuracy\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.legend()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "scZoJna2M6Wo"
      },
      "source": [
        "### The nature of generalization in deep learning"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rT--VpF_M6Wo"
      },
      "source": [
        "**Fitting a MNIST model with randomly shuffled labels**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "_LF4x-LqM6Wo",
        "outputId": "9b295b7b-a0b6-4ea9-ce68-ab82721d0845",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 2.3162 - accuracy: 0.1029 - val_loss: 2.3054 - val_accuracy: 0.1023\n",
            "Epoch 2/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 2.2990 - accuracy: 0.1172 - val_loss: 2.3098 - val_accuracy: 0.1045\n",
            "Epoch 3/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 2.2901 - accuracy: 0.1283 - val_loss: 2.3162 - val_accuracy: 0.0976\n",
            "Epoch 4/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 2.2780 - accuracy: 0.1400 - val_loss: 2.3234 - val_accuracy: 0.1071\n",
            "Epoch 5/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 2.2621 - accuracy: 0.1531 - val_loss: 2.3372 - val_accuracy: 0.1018\n",
            "Epoch 6/100\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 2.2429 - accuracy: 0.1660 - val_loss: 2.3491 - val_accuracy: 0.1008\n",
            "Epoch 7/100\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 2.2194 - accuracy: 0.1806 - val_loss: 2.3506 - val_accuracy: 0.1040\n",
            "Epoch 8/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 2.1934 - accuracy: 0.1971 - val_loss: 2.3751 - val_accuracy: 0.1033\n",
            "Epoch 9/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 2.1640 - accuracy: 0.2137 - val_loss: 2.3921 - val_accuracy: 0.1011\n",
            "Epoch 10/100\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 2.1330 - accuracy: 0.2293 - val_loss: 2.4115 - val_accuracy: 0.1018\n",
            "Epoch 11/100\n",
            "375/375 [==============================] - 2s 6ms/step - loss: 2.0991 - accuracy: 0.2460 - val_loss: 2.4417 - val_accuracy: 0.0971\n",
            "Epoch 12/100\n",
            "375/375 [==============================] - 3s 8ms/step - loss: 2.0635 - accuracy: 0.2626 - val_loss: 2.4677 - val_accuracy: 0.1029\n",
            "Epoch 13/100\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 2.0272 - accuracy: 0.2753 - val_loss: 2.4965 - val_accuracy: 0.1034\n",
            "Epoch 14/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.9889 - accuracy: 0.2964 - val_loss: 2.5322 - val_accuracy: 0.0986\n",
            "Epoch 15/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 1.9506 - accuracy: 0.3117 - val_loss: 2.5593 - val_accuracy: 0.1028\n",
            "Epoch 16/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.9127 - accuracy: 0.3274 - val_loss: 2.5901 - val_accuracy: 0.1018\n",
            "Epoch 17/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.8723 - accuracy: 0.3422 - val_loss: 2.6285 - val_accuracy: 0.1005\n",
            "Epoch 18/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.8348 - accuracy: 0.3584 - val_loss: 2.6545 - val_accuracy: 0.0978\n",
            "Epoch 19/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 1.7979 - accuracy: 0.3717 - val_loss: 2.6938 - val_accuracy: 0.1014\n",
            "Epoch 20/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.7589 - accuracy: 0.3891 - val_loss: 2.7329 - val_accuracy: 0.1010\n",
            "Epoch 21/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 1.7202 - accuracy: 0.4023 - val_loss: 2.7606 - val_accuracy: 0.1008\n",
            "Epoch 22/100\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 1.6819 - accuracy: 0.4211 - val_loss: 2.8308 - val_accuracy: 0.1028\n",
            "Epoch 23/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 1.6458 - accuracy: 0.4335 - val_loss: 2.8884 - val_accuracy: 0.1004\n",
            "Epoch 24/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 1.6090 - accuracy: 0.4469 - val_loss: 2.9144 - val_accuracy: 0.1023\n",
            "Epoch 25/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.5747 - accuracy: 0.4612 - val_loss: 2.9412 - val_accuracy: 0.0982\n",
            "Epoch 26/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.5407 - accuracy: 0.4716 - val_loss: 2.9948 - val_accuracy: 0.0972\n",
            "Epoch 27/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.5069 - accuracy: 0.4827 - val_loss: 3.0498 - val_accuracy: 0.0993\n",
            "Epoch 28/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 1.4741 - accuracy: 0.4986 - val_loss: 3.1137 - val_accuracy: 0.1007\n",
            "Epoch 29/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.4416 - accuracy: 0.5103 - val_loss: 3.1293 - val_accuracy: 0.0997\n",
            "Epoch 30/100\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 1.4098 - accuracy: 0.5204 - val_loss: 3.2101 - val_accuracy: 0.0984\n",
            "Epoch 31/100\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 1.3791 - accuracy: 0.5303 - val_loss: 3.2580 - val_accuracy: 0.1008\n",
            "Epoch 32/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.3475 - accuracy: 0.5424 - val_loss: 3.3178 - val_accuracy: 0.1001\n",
            "Epoch 33/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.3222 - accuracy: 0.5512 - val_loss: 3.3549 - val_accuracy: 0.1009\n",
            "Epoch 34/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.2921 - accuracy: 0.5646 - val_loss: 3.4088 - val_accuracy: 0.0977\n",
            "Epoch 35/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.2641 - accuracy: 0.5716 - val_loss: 3.4979 - val_accuracy: 0.0954\n",
            "Epoch 36/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 1.2364 - accuracy: 0.5836 - val_loss: 3.5234 - val_accuracy: 0.1005\n",
            "Epoch 37/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 1.2097 - accuracy: 0.5907 - val_loss: 3.5958 - val_accuracy: 0.0983\n",
            "Epoch 38/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 1.1848 - accuracy: 0.6004 - val_loss: 3.6440 - val_accuracy: 0.1026\n",
            "Epoch 39/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 1.1590 - accuracy: 0.6114 - val_loss: 3.6901 - val_accuracy: 0.1019\n",
            "Epoch 40/100\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 1.1344 - accuracy: 0.6198 - val_loss: 3.7546 - val_accuracy: 0.0999\n",
            "Epoch 41/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.1108 - accuracy: 0.6279 - val_loss: 3.8462 - val_accuracy: 0.0992\n",
            "Epoch 42/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.0836 - accuracy: 0.6384 - val_loss: 3.8803 - val_accuracy: 0.1002\n",
            "Epoch 43/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.0636 - accuracy: 0.6470 - val_loss: 3.9511 - val_accuracy: 0.0982\n",
            "Epoch 44/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 1.0421 - accuracy: 0.6535 - val_loss: 4.0069 - val_accuracy: 0.1021\n",
            "Epoch 45/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.0179 - accuracy: 0.6619 - val_loss: 4.0669 - val_accuracy: 0.0976\n",
            "Epoch 46/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.9980 - accuracy: 0.6699 - val_loss: 4.0999 - val_accuracy: 0.1001\n",
            "Epoch 47/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.9783 - accuracy: 0.6762 - val_loss: 4.1675 - val_accuracy: 0.0997\n",
            "Epoch 48/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.9575 - accuracy: 0.6830 - val_loss: 4.2362 - val_accuracy: 0.1002\n",
            "Epoch 49/100\n",
            "375/375 [==============================] - 2s 6ms/step - loss: 0.9376 - accuracy: 0.6918 - val_loss: 4.2986 - val_accuracy: 0.1013\n",
            "Epoch 50/100\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.9170 - accuracy: 0.6977 - val_loss: 4.4190 - val_accuracy: 0.1007\n",
            "Epoch 51/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.8974 - accuracy: 0.7036 - val_loss: 4.4252 - val_accuracy: 0.1042\n",
            "Epoch 52/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.8798 - accuracy: 0.7097 - val_loss: 4.5424 - val_accuracy: 0.0966\n",
            "Epoch 53/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.8635 - accuracy: 0.7168 - val_loss: 4.5856 - val_accuracy: 0.0997\n",
            "Epoch 54/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.8445 - accuracy: 0.7227 - val_loss: 4.6545 - val_accuracy: 0.1016\n",
            "Epoch 55/100\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.8291 - accuracy: 0.7293 - val_loss: 4.6665 - val_accuracy: 0.1009\n",
            "Epoch 56/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.8110 - accuracy: 0.7356 - val_loss: 4.7422 - val_accuracy: 0.1018\n",
            "Epoch 57/100\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.7948 - accuracy: 0.7413 - val_loss: 4.8552 - val_accuracy: 0.1003\n",
            "Epoch 58/100\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.7786 - accuracy: 0.7467 - val_loss: 4.9314 - val_accuracy: 0.1033\n",
            "Epoch 59/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.7617 - accuracy: 0.7511 - val_loss: 5.0118 - val_accuracy: 0.1018\n",
            "Epoch 60/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.7470 - accuracy: 0.7580 - val_loss: 5.0333 - val_accuracy: 0.0994\n",
            "Epoch 61/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.7325 - accuracy: 0.7632 - val_loss: 5.1361 - val_accuracy: 0.1002\n",
            "Epoch 62/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.7170 - accuracy: 0.7670 - val_loss: 5.1723 - val_accuracy: 0.0972\n",
            "Epoch 63/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.7044 - accuracy: 0.7728 - val_loss: 5.2515 - val_accuracy: 0.0969\n",
            "Epoch 64/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.6894 - accuracy: 0.7776 - val_loss: 5.3210 - val_accuracy: 0.1026\n",
            "Epoch 65/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.6771 - accuracy: 0.7822 - val_loss: 5.3913 - val_accuracy: 0.1042\n",
            "Epoch 66/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.6615 - accuracy: 0.7872 - val_loss: 5.4275 - val_accuracy: 0.1027\n",
            "Epoch 67/100\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.6466 - accuracy: 0.7927 - val_loss: 5.5189 - val_accuracy: 0.1007\n",
            "Epoch 68/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.6367 - accuracy: 0.7965 - val_loss: 5.6425 - val_accuracy: 0.0990\n",
            "Epoch 69/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.6229 - accuracy: 0.7994 - val_loss: 5.6525 - val_accuracy: 0.0982\n",
            "Epoch 70/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.6133 - accuracy: 0.8047 - val_loss: 5.7351 - val_accuracy: 0.1002\n",
            "Epoch 71/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.5969 - accuracy: 0.8107 - val_loss: 5.8483 - val_accuracy: 0.0978\n",
            "Epoch 72/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.5866 - accuracy: 0.8118 - val_loss: 5.8873 - val_accuracy: 0.1018\n",
            "Epoch 73/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.5777 - accuracy: 0.8156 - val_loss: 5.9446 - val_accuracy: 0.1008\n",
            "Epoch 74/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.5653 - accuracy: 0.8213 - val_loss: 6.0464 - val_accuracy: 0.1018\n",
            "Epoch 75/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.5531 - accuracy: 0.8257 - val_loss: 6.1069 - val_accuracy: 0.1019\n",
            "Epoch 76/100\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.5426 - accuracy: 0.8270 - val_loss: 6.2331 - val_accuracy: 0.0979\n",
            "Epoch 77/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.5328 - accuracy: 0.8316 - val_loss: 6.2001 - val_accuracy: 0.1004\n",
            "Epoch 78/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.5200 - accuracy: 0.8366 - val_loss: 6.3133 - val_accuracy: 0.0992\n",
            "Epoch 79/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.5112 - accuracy: 0.8395 - val_loss: 6.3959 - val_accuracy: 0.0983\n",
            "Epoch 80/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.4998 - accuracy: 0.8429 - val_loss: 6.4952 - val_accuracy: 0.0954\n",
            "Epoch 81/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.4937 - accuracy: 0.8446 - val_loss: 6.5702 - val_accuracy: 0.0993\n",
            "Epoch 82/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.4844 - accuracy: 0.8476 - val_loss: 6.5974 - val_accuracy: 0.0972\n",
            "Epoch 83/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.4749 - accuracy: 0.8497 - val_loss: 6.6730 - val_accuracy: 0.0982\n",
            "Epoch 84/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.4647 - accuracy: 0.8547 - val_loss: 6.7638 - val_accuracy: 0.0993\n",
            "Epoch 85/100\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.4558 - accuracy: 0.8570 - val_loss: 6.8533 - val_accuracy: 0.0975\n",
            "Epoch 86/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.4478 - accuracy: 0.8601 - val_loss: 6.8626 - val_accuracy: 0.0997\n",
            "Epoch 87/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.4391 - accuracy: 0.8629 - val_loss: 6.9944 - val_accuracy: 0.0991\n",
            "Epoch 88/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.4305 - accuracy: 0.8647 - val_loss: 7.0697 - val_accuracy: 0.0973\n",
            "Epoch 89/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.4248 - accuracy: 0.8677 - val_loss: 7.1053 - val_accuracy: 0.0972\n",
            "Epoch 90/100\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.4169 - accuracy: 0.8689 - val_loss: 7.2570 - val_accuracy: 0.0986\n",
            "Epoch 91/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.4061 - accuracy: 0.8745 - val_loss: 7.3195 - val_accuracy: 0.0997\n",
            "Epoch 92/100\n",
            "375/375 [==============================] - 2s 6ms/step - loss: 0.4018 - accuracy: 0.8745 - val_loss: 7.3686 - val_accuracy: 0.0995\n",
            "Epoch 93/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.3933 - accuracy: 0.8778 - val_loss: 7.4036 - val_accuracy: 0.0985\n",
            "Epoch 94/100\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.3872 - accuracy: 0.8796 - val_loss: 7.5331 - val_accuracy: 0.0951\n",
            "Epoch 95/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.3785 - accuracy: 0.8830 - val_loss: 7.6208 - val_accuracy: 0.0993\n",
            "Epoch 96/100\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.3722 - accuracy: 0.8848 - val_loss: 7.7114 - val_accuracy: 0.0997\n",
            "Epoch 97/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.3653 - accuracy: 0.8867 - val_loss: 7.7478 - val_accuracy: 0.0950\n",
            "Epoch 98/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.3599 - accuracy: 0.8870 - val_loss: 7.8572 - val_accuracy: 0.1003\n",
            "Epoch 99/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.3527 - accuracy: 0.8907 - val_loss: 7.8630 - val_accuracy: 0.0975\n",
            "Epoch 100/100\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.3457 - accuracy: 0.8947 - val_loss: 7.9759 - val_accuracy: 0.0971\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7cf073ea4940>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "(train_images, train_labels), _ = mnist.load_data()\n",
        "train_images = train_images.reshape((60000, 28 * 28))\n",
        "train_images = train_images.astype(\"float32\") / 255\n",
        "\n",
        "random_train_labels = train_labels[:]\n",
        "np.random.shuffle(random_train_labels)\n",
        "\n",
        "model = keras.Sequential([\n",
        "    layers.Dense(512, activation=\"relu\"),\n",
        "    layers.Dense(10, activation=\"softmax\")\n",
        "])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"sparse_categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "model.fit(train_images, random_train_labels,\n",
        "          epochs=100,\n",
        "          batch_size=128,\n",
        "          validation_split=0.2)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: Fitting a MNIST model with randomly shuffled labels.\n",
        "# Visualize training accuracy and validation accuracy.\n",
        "\n",
        "history = model.fit(train_images, random_train_labels,\n",
        "          epochs=30,\n",
        "          batch_size=128,\n",
        "          validation_split=0.2)\n",
        "\n",
        "acc = history.history['accuracy']\n",
        "val_acc = history.history['val_accuracy']\n",
        "\n",
        "epochs = range(1, len(acc) + 1)\n",
        "\n",
        "plt.plot(epochs, acc, 'b-', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b--', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n"
      ],
      "metadata": {
        "id": "t3GwpiIEXMZ8",
        "outputId": "187da978-5d08-41c2-c8e8-990278150ed9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0835 - accuracy: 0.9756 - val_loss: 15.0212 - val_accuracy: 0.0962\n",
            "Epoch 2/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0839 - accuracy: 0.9747 - val_loss: 15.0738 - val_accuracy: 0.0975\n",
            "Epoch 3/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0822 - accuracy: 0.9756 - val_loss: 15.1920 - val_accuracy: 0.0953\n",
            "Epoch 4/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0826 - accuracy: 0.9756 - val_loss: 15.1397 - val_accuracy: 0.0953\n",
            "Epoch 5/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0814 - accuracy: 0.9762 - val_loss: 15.1857 - val_accuracy: 0.1005\n",
            "Epoch 6/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0805 - accuracy: 0.9761 - val_loss: 15.2733 - val_accuracy: 0.0991\n",
            "Epoch 7/30\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0792 - accuracy: 0.9770 - val_loss: 15.3507 - val_accuracy: 0.0960\n",
            "Epoch 8/30\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.0779 - accuracy: 0.9766 - val_loss: 15.4158 - val_accuracy: 0.0982\n",
            "Epoch 9/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0765 - accuracy: 0.9778 - val_loss: 15.4462 - val_accuracy: 0.0991\n",
            "Epoch 10/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0768 - accuracy: 0.9775 - val_loss: 15.4273 - val_accuracy: 0.0988\n",
            "Epoch 11/30\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0768 - accuracy: 0.9778 - val_loss: 15.4663 - val_accuracy: 0.0997\n",
            "Epoch 12/30\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0759 - accuracy: 0.9782 - val_loss: 15.6175 - val_accuracy: 0.0991\n",
            "Epoch 13/30\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0761 - accuracy: 0.9766 - val_loss: 15.7355 - val_accuracy: 0.0965\n",
            "Epoch 14/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0745 - accuracy: 0.9778 - val_loss: 15.6965 - val_accuracy: 0.0962\n",
            "Epoch 15/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0744 - accuracy: 0.9779 - val_loss: 15.7630 - val_accuracy: 0.0990\n",
            "Epoch 16/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0721 - accuracy: 0.9790 - val_loss: 15.9035 - val_accuracy: 0.0996\n",
            "Epoch 17/30\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.0728 - accuracy: 0.9787 - val_loss: 16.0228 - val_accuracy: 0.0998\n",
            "Epoch 18/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0728 - accuracy: 0.9783 - val_loss: 15.9554 - val_accuracy: 0.0961\n",
            "Epoch 19/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0723 - accuracy: 0.9784 - val_loss: 16.0462 - val_accuracy: 0.0988\n",
            "Epoch 20/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0725 - accuracy: 0.9786 - val_loss: 16.1324 - val_accuracy: 0.0957\n",
            "Epoch 21/30\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0718 - accuracy: 0.9790 - val_loss: 16.1095 - val_accuracy: 0.0947\n",
            "Epoch 22/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0690 - accuracy: 0.9801 - val_loss: 16.1258 - val_accuracy: 0.0976\n",
            "Epoch 23/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0703 - accuracy: 0.9788 - val_loss: 16.2446 - val_accuracy: 0.0990\n",
            "Epoch 24/30\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0663 - accuracy: 0.9806 - val_loss: 16.2353 - val_accuracy: 0.0981\n",
            "Epoch 25/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0690 - accuracy: 0.9797 - val_loss: 16.3713 - val_accuracy: 0.0969\n",
            "Epoch 26/30\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.0662 - accuracy: 0.9801 - val_loss: 16.3633 - val_accuracy: 0.0970\n",
            "Epoch 27/30\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0675 - accuracy: 0.9805 - val_loss: 16.3559 - val_accuracy: 0.0985\n",
            "Epoch 28/30\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0683 - accuracy: 0.9800 - val_loss: 16.4936 - val_accuracy: 0.0947\n",
            "Epoch 29/30\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0664 - accuracy: 0.9805 - val_loss: 16.5621 - val_accuracy: 0.0963\n",
            "Epoch 30/30\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0659 - accuracy: 0.9809 - val_loss: 16.5829 - val_accuracy: 0.0988\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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w4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyw4BDREREssOAQ0RERLLDgENERESyY2XuAoiISF7UajXy8/PNXQY9haytrWFpaVkp62LAISKiSiGEwN27d5GammruUugp5uLiAi8vLygUisda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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "25L-b23BM6Wp"
      },
      "source": [
        "#### The manifold hypothesis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NmY_bMAwM6Wp"
      },
      "source": [
        "#### Interpolation as a source of generalization"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GglPF3t1M6Wp"
      },
      "source": [
        "#### Why deep learning works"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8xee4c0jM6Wp"
      },
      "source": [
        "#### Training data is paramount"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0Ax166JXM6Wp"
      },
      "source": [
        "## Evaluating machine-learning models"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hs0o5KViM6Wp"
      },
      "source": [
        "### Training, validation, and test sets"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0NA-prRVM6Wp"
      },
      "source": [
        "#### Simple hold-out validation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OQNGAXJsM6Wq"
      },
      "source": [
        "#### K-fold validation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uuqXtradM6Wq"
      },
      "source": [
        "#### Iterated K-fold validation with shuffling"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a89RhM6OM6Wq"
      },
      "source": [
        "### Beating a common-sense baseline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "27zPSw-mM6Wq"
      },
      "source": [
        "### Things to keep in mind about model evaluation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oJDgerd-M6Wq"
      },
      "source": [
        "## Improving model fit"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MWrjx70oM6Wq"
      },
      "source": [
        "### Tuning key gradient descent parameters"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dstjf2UcM6Wq"
      },
      "source": [
        "**Training a MNIST model with an incorrectly high learning rate**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "3PfRTeKCM6Wq",
        "outputId": "652beddd-7ae3-4b71-cd1f-e388819c944a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 617.0152 - accuracy: 0.2711 - val_loss: 2.2550 - val_accuracy: 0.2306\n",
            "Epoch 2/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 3.2766 - accuracy: 0.1787 - val_loss: 2.3732 - val_accuracy: 0.1713\n",
            "Epoch 3/10\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 2.5429 - accuracy: 0.1657 - val_loss: 2.1144 - val_accuracy: 0.1957\n",
            "Epoch 4/10\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 2.6464 - accuracy: 0.1870 - val_loss: 2.2072 - val_accuracy: 0.1683\n",
            "Epoch 5/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 2.5010 - accuracy: 0.1651 - val_loss: 2.3575 - val_accuracy: 0.1303\n",
            "Epoch 6/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 2.4991 - accuracy: 0.1965 - val_loss: 2.7856 - val_accuracy: 0.2225\n",
            "Epoch 7/10\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 2.4637 - accuracy: 0.1698 - val_loss: 2.1983 - val_accuracy: 0.1992\n",
            "Epoch 8/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 2.4195 - accuracy: 0.1872 - val_loss: 2.2296 - val_accuracy: 0.1651\n",
            "Epoch 9/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 2.3262 - accuracy: 0.2019 - val_loss: 2.1918 - val_accuracy: 0.2296\n",
            "Epoch 10/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 2.7447 - accuracy: 0.2124 - val_loss: 2.1929 - val_accuracy: 0.1668\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7cf07ce2d8d0>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "(train_images, train_labels), _ = mnist.load_data()\n",
        "train_images = train_images.reshape((60000, 28 * 28))\n",
        "train_images = train_images.astype(\"float32\") / 255\n",
        "\n",
        "model = keras.Sequential([\n",
        "    layers.Dense(512, activation=\"relu\"),\n",
        "    layers.Dense(10, activation=\"softmax\")\n",
        "])\n",
        "model.compile(optimizer=keras.optimizers.RMSprop(1.),\n",
        "              loss=\"sparse_categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "model.fit(train_images, train_labels,\n",
        "          epochs=10,\n",
        "          batch_size=128,\n",
        "          validation_split=0.2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "34U5RdleM6Wq"
      },
      "source": [
        "**The same model with a more appropriate learning rate**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "Z6lht5ZZM6Wr",
        "outputId": "3e443fb6-0232-442b-a995-09cd3b49a186",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.3418 - accuracy: 0.9125 - val_loss: 0.3002 - val_accuracy: 0.9140\n",
            "Epoch 2/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.1277 - accuracy: 0.9647 - val_loss: 0.1430 - val_accuracy: 0.9626\n",
            "Epoch 3/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0998 - accuracy: 0.9726 - val_loss: 0.1464 - val_accuracy: 0.9682\n",
            "Epoch 4/10\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0786 - accuracy: 0.9796 - val_loss: 0.1727 - val_accuracy: 0.9658\n",
            "Epoch 5/10\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0735 - accuracy: 0.9819 - val_loss: 0.1540 - val_accuracy: 0.9719\n",
            "Epoch 6/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0659 - accuracy: 0.9851 - val_loss: 0.1685 - val_accuracy: 0.9723\n",
            "Epoch 7/10\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.0536 - accuracy: 0.9873 - val_loss: 0.2126 - val_accuracy: 0.9686\n",
            "Epoch 8/10\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.0442 - accuracy: 0.9891 - val_loss: 0.2094 - val_accuracy: 0.9696\n",
            "Epoch 9/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0437 - accuracy: 0.9900 - val_loss: 0.2580 - val_accuracy: 0.9672\n",
            "Epoch 10/10\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0397 - accuracy: 0.9916 - val_loss: 0.2408 - val_accuracy: 0.9717\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7cf07ce02bc0>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "model = keras.Sequential([\n",
        "    layers.Dense(512, activation=\"relu\"),\n",
        "    layers.Dense(10, activation=\"softmax\")\n",
        "])\n",
        "model.compile(optimizer=keras.optimizers.RMSprop(1e-2),\n",
        "              loss=\"sparse_categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "model.fit(train_images, train_labels,\n",
        "          epochs=10,\n",
        "          batch_size=128,\n",
        "          validation_split=0.2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jMuQ0leJM6Wr"
      },
      "source": [
        "### Leveraging better architecture priors"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ym0qOmDIM6Wr"
      },
      "source": [
        "### Increasing model capacity"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1dmiCvR0M6Wr"
      },
      "source": [
        "**A simple logistic regression on MNIST**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "P0N7CioTM6Wr",
        "outputId": "8754189c-dbf4-4f99-baae-603f5da1e0e5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.6849 - accuracy: 0.8305 - val_loss: 0.3600 - val_accuracy: 0.9038\n",
            "Epoch 2/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.3538 - accuracy: 0.9022 - val_loss: 0.3122 - val_accuracy: 0.9133\n",
            "Epoch 3/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.3182 - accuracy: 0.9109 - val_loss: 0.2921 - val_accuracy: 0.9183\n",
            "Epoch 4/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.3020 - accuracy: 0.9157 - val_loss: 0.2840 - val_accuracy: 0.9193\n",
            "Epoch 5/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.2922 - accuracy: 0.9184 - val_loss: 0.2777 - val_accuracy: 0.9231\n",
            "Epoch 6/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.2855 - accuracy: 0.9201 - val_loss: 0.2743 - val_accuracy: 0.9246\n",
            "Epoch 7/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.2805 - accuracy: 0.9215 - val_loss: 0.2716 - val_accuracy: 0.9259\n",
            "Epoch 8/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.2765 - accuracy: 0.9227 - val_loss: 0.2703 - val_accuracy: 0.9253\n",
            "Epoch 9/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.2733 - accuracy: 0.9245 - val_loss: 0.2674 - val_accuracy: 0.9272\n",
            "Epoch 10/20\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.2707 - accuracy: 0.9249 - val_loss: 0.2675 - val_accuracy: 0.9265\n",
            "Epoch 11/20\n",
            "375/375 [==============================] - 3s 7ms/step - loss: 0.2687 - accuracy: 0.9256 - val_loss: 0.2661 - val_accuracy: 0.9273\n",
            "Epoch 12/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.2668 - accuracy: 0.9263 - val_loss: 0.2668 - val_accuracy: 0.9279\n",
            "Epoch 13/20\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.2649 - accuracy: 0.9275 - val_loss: 0.2660 - val_accuracy: 0.9268\n",
            "Epoch 14/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.2631 - accuracy: 0.9273 - val_loss: 0.2652 - val_accuracy: 0.9274\n",
            "Epoch 15/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.2619 - accuracy: 0.9274 - val_loss: 0.2627 - val_accuracy: 0.9297\n",
            "Epoch 16/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.2604 - accuracy: 0.9285 - val_loss: 0.2645 - val_accuracy: 0.9295\n",
            "Epoch 17/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.2595 - accuracy: 0.9288 - val_loss: 0.2628 - val_accuracy: 0.9297\n",
            "Epoch 18/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.2582 - accuracy: 0.9293 - val_loss: 0.2621 - val_accuracy: 0.9306\n",
            "Epoch 19/20\n",
            "375/375 [==============================] - 2s 6ms/step - loss: 0.2574 - accuracy: 0.9292 - val_loss: 0.2620 - val_accuracy: 0.9298\n",
            "Epoch 20/20\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.2563 - accuracy: 0.9295 - val_loss: 0.2630 - val_accuracy: 0.9304\n"
          ]
        }
      ],
      "source": [
        "model = keras.Sequential([layers.Dense(10, activation=\"softmax\")]) #1layer simple logistic regression\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"sparse_categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "history_small_model = model.fit(\n",
        "    train_images, train_labels,\n",
        "    epochs=20,\n",
        "    batch_size=128,\n",
        "    validation_split=0.2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "aLKTcyMKM6Wr",
        "outputId": "bfced359-b747-4a65-f337-4f5b75cab63b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7cf07cca2dd0>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "val_loss = history_small_model.history[\"val_loss\"]\n",
        "epochs = range(1, 21)\n",
        "plt.plot(epochs, val_loss, \"b--\",\n",
        "         label=\"Validation loss\")\n",
        "plt.title(\"Effect of insufficient model capacity on validation loss\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "MK3JLJMtM6Wt",
        "outputId": "6016bed3-5252-4407-c0fb-ae74b85f2072",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.3688 - accuracy: 0.8968 - val_loss: 0.1840 - val_accuracy: 0.9474\n",
            "Epoch 2/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.1644 - accuracy: 0.9511 - val_loss: 0.1349 - val_accuracy: 0.9606\n",
            "Epoch 3/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.1138 - accuracy: 0.9655 - val_loss: 0.1258 - val_accuracy: 0.9622\n",
            "Epoch 4/20\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.0866 - accuracy: 0.9736 - val_loss: 0.1052 - val_accuracy: 0.9677\n",
            "Epoch 5/20\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.0695 - accuracy: 0.9792 - val_loss: 0.1020 - val_accuracy: 0.9693\n",
            "Epoch 6/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0576 - accuracy: 0.9823 - val_loss: 0.0924 - val_accuracy: 0.9727\n",
            "Epoch 7/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0470 - accuracy: 0.9859 - val_loss: 0.0921 - val_accuracy: 0.9739\n",
            "Epoch 8/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0398 - accuracy: 0.9875 - val_loss: 0.0994 - val_accuracy: 0.9734\n",
            "Epoch 9/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0330 - accuracy: 0.9898 - val_loss: 0.1036 - val_accuracy: 0.9717\n",
            "Epoch 10/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0278 - accuracy: 0.9913 - val_loss: 0.0927 - val_accuracy: 0.9758\n",
            "Epoch 11/20\n",
            "375/375 [==============================] - 2s 6ms/step - loss: 0.0230 - accuracy: 0.9932 - val_loss: 0.0972 - val_accuracy: 0.9745\n",
            "Epoch 12/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0200 - accuracy: 0.9939 - val_loss: 0.0974 - val_accuracy: 0.9754\n",
            "Epoch 13/20\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.0161 - accuracy: 0.9954 - val_loss: 0.1081 - val_accuracy: 0.9754\n",
            "Epoch 14/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0144 - accuracy: 0.9956 - val_loss: 0.1028 - val_accuracy: 0.9765\n",
            "Epoch 15/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0115 - accuracy: 0.9967 - val_loss: 0.1091 - val_accuracy: 0.9763\n",
            "Epoch 16/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0106 - accuracy: 0.9968 - val_loss: 0.1031 - val_accuracy: 0.9758\n",
            "Epoch 17/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0081 - accuracy: 0.9977 - val_loss: 0.1153 - val_accuracy: 0.9767\n",
            "Epoch 18/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0076 - accuracy: 0.9975 - val_loss: 0.1169 - val_accuracy: 0.9762\n",
            "Epoch 19/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0061 - accuracy: 0.9983 - val_loss: 0.1225 - val_accuracy: 0.9746\n",
            "Epoch 20/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0052 - accuracy: 0.9984 - val_loss: 0.1345 - val_accuracy: 0.9738\n",
            "Epoch 1/20\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 0.0050 - accuracy: 0.9985 - val_loss: 0.1243 - val_accuracy: 0.9765\n",
            "Epoch 2/20\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.0038 - accuracy: 0.9989 - val_loss: 0.1494 - val_accuracy: 0.9717\n",
            "Epoch 3/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0033 - accuracy: 0.9989 - val_loss: 0.1343 - val_accuracy: 0.9762\n",
            "Epoch 4/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0034 - accuracy: 0.9991 - val_loss: 0.1456 - val_accuracy: 0.9774\n",
            "Epoch 5/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0020 - accuracy: 0.9994 - val_loss: 0.1384 - val_accuracy: 0.9765\n",
            "Epoch 6/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 0.0026 - accuracy: 0.9992 - val_loss: 0.1436 - val_accuracy: 0.9771\n",
            "Epoch 7/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0018 - accuracy: 0.9996 - val_loss: 0.1454 - val_accuracy: 0.9762\n",
            "Epoch 8/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 0.0015 - accuracy: 0.9996 - val_loss: 0.1483 - val_accuracy: 0.9766\n",
            "Epoch 9/20\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.0015 - accuracy: 0.9996 - val_loss: 0.1592 - val_accuracy: 0.9746\n",
            "Epoch 10/20\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 0.0012 - accuracy: 0.9997 - val_loss: 0.1534 - val_accuracy: 0.9762\n",
            "Epoch 11/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 7.3712e-04 - accuracy: 0.9998 - val_loss: 0.1515 - val_accuracy: 0.9773\n",
            "Epoch 12/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 6.5191e-04 - accuracy: 0.9999 - val_loss: 0.1630 - val_accuracy: 0.9754\n",
            "Epoch 13/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 7.7532e-04 - accuracy: 0.9998 - val_loss: 0.1650 - val_accuracy: 0.9755\n",
            "Epoch 14/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 4.0344e-04 - accuracy: 0.9999 - val_loss: 0.1625 - val_accuracy: 0.9765\n",
            "Epoch 15/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 6.0633e-05 - accuracy: 1.0000 - val_loss: 0.1556 - val_accuracy: 0.9773\n",
            "Epoch 16/20\n",
            "375/375 [==============================] - 1s 4ms/step - loss: 2.8409e-05 - accuracy: 1.0000 - val_loss: 0.1555 - val_accuracy: 0.9777\n",
            "Epoch 17/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 2.3633e-05 - accuracy: 1.0000 - val_loss: 0.1558 - val_accuracy: 0.9776\n",
            "Epoch 18/20\n",
            "375/375 [==============================] - 2s 5ms/step - loss: 2.0482e-05 - accuracy: 1.0000 - val_loss: 0.1560 - val_accuracy: 0.9778\n",
            "Epoch 19/20\n",
            "375/375 [==============================] - 2s 4ms/step - loss: 1.8519e-05 - accuracy: 1.0000 - val_loss: 0.1574 - val_accuracy: 0.9777\n",
            "Epoch 20/20\n",
            "375/375 [==============================] - 1s 3ms/step - loss: 1.7330e-05 - accuracy: 1.0000 - val_loss: 0.1571 - val_accuracy: 0.9778\n"
          ]
        }
      ],
      "source": [
        "model = keras.Sequential([\n",
        "    layers.Dense(96, activation=\"relu\"),\n",
        "    layers.Dense(96, activation=\"relu\"),\n",
        "    layers.Dense(10, activation=\"softmax\"),\n",
        "])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"sparse_categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "history_large_model = model.fit(\n",
        "    train_images, train_labels,\n",
        "    epochs=20,\n",
        "    batch_size=128,\n",
        "    validation_split=0.2)\n",
        "\n",
        "history_original_model = model.fit(\n",
        "    train_images, train_labels,\n",
        "    epochs=20,\n",
        "    batch_size=128,\n",
        "    validation_split=0.2)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "val_loss = history_large_model.history[\"val_loss\"]\n",
        "epochs = range(1, 21)\n",
        "plt.plot(epochs, val_loss, \"b--\",\n",
        "         label=\"Validation loss\")\n",
        "plt.title(\"Effect of insufficient model capacity on validation loss\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()"
      ],
      "metadata": {
        "id": "NcXwJUT6asGa",
        "outputId": "5e268b9a-cedd-4877-8ed0-bb7cb07b7294",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        }
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7cf07ca673a0>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt:  Visualize validation loss of the original model, model with lower capacity and model\n",
        "# with larger capacity\n",
        "\n",
        "val_loss_original = history_original_model.history[\"val_loss\"]\n",
        "val_loss_small_model = history_small_model.history[\"val_loss\"]\n",
        "val_loss_large_model = history_large_model.history[\"val_loss\"]\n",
        "epochs = range(1, 21)\n",
        "\n",
        "\n",
        "plt.plot(epochs, val_loss_small_model, \"b--\", label=\"Small model\")\n",
        "plt.plot(epochs, val_loss_large_model, \"b-.\", label=\"Large model\")\n",
        "plt.plot(epochs, val_loss_original, \"r-\",label=\"Original model\")\n",
        "plt.title(\"Comparison of validation loss for different model capacities\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "\n"
      ],
      "metadata": {
        "id": "TSkatzTBbPDS",
        "outputId": "99ed7f4a-0eb1-4b6c-9b5c-d48df0377d87",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        }
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7cf1525faf50>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-m_uPTSZM6Wy"
      },
      "source": [
        "## Improving generalization"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GARCOf1xM6Wz"
      },
      "source": [
        "### Dataset curation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9oYy5EXzM6Wz"
      },
      "source": [
        "### Feature engineering"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ImKM-_xeM6Wz"
      },
      "source": [
        "### Using early stopping"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H9pYFi-XM6Wz"
      },
      "source": [
        "### Regularizing your model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HXVqsjHjM6Wz"
      },
      "source": [
        "#### Reducing the network's size"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y2qI-FEfM6W0"
      },
      "source": [
        "**Original model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ibu2nwQwM6W0"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.datasets import imdb\n",
        "(train_data, train_labels), _ = imdb.load_data(num_words=10000)\n",
        "\n",
        "def vectorize_sequences(sequences, dimension=10000):\n",
        "    results = np.zeros((len(sequences), dimension))\n",
        "    for i, sequence in enumerate(sequences):\n",
        "        results[i, sequence] = 1.\n",
        "    return results\n",
        "train_data = vectorize_sequences(train_data)\n",
        "\n",
        "model = keras.Sequential([\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(1, activation=\"sigmoid\")\n",
        "])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"binary_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "history_original = model.fit(train_data, train_labels,\n",
        "                             epochs=20, batch_size=512, validation_split=0.4)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7PAHciIIM6W0"
      },
      "source": [
        "**Version of the model with lower capacity**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rFzQ0UIrM6W0"
      },
      "outputs": [],
      "source": [
        "model = keras.Sequential([\n",
        "    layers.Dense(4, activation=\"relu\"),\n",
        "    layers.Dense(4, activation=\"relu\"),\n",
        "    layers.Dense(1, activation=\"sigmoid\")\n",
        "])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"binary_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "history_smaller_model = model.fit(\n",
        "    train_data, train_labels,\n",
        "    epochs=20, batch_size=512, validation_split=0.4)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vrT7NUmEM6W0"
      },
      "source": [
        "**Version of the model with higher capacity**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5DXrGpLcM6W1"
      },
      "outputs": [],
      "source": [
        "model = keras.Sequential([\n",
        "    layers.Dense(512, activation=\"relu\"),\n",
        "    layers.Dense(512, activation=\"relu\"),\n",
        "    layers.Dense(1, activation=\"sigmoid\")\n",
        "])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"binary_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "history_larger_model = model.fit(\n",
        "    train_data, train_labels,\n",
        "    epochs=20, batch_size=512, validation_split=0.4)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eokGzCtPM6W1"
      },
      "source": [
        "#### Adding weight regularization"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VGrtlnRgM6W1"
      },
      "source": [
        "**Adding L2 weight regularization to the model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HlCP0HKaM6W1"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras import regularizers\n",
        "model = keras.Sequential([\n",
        "    layers.Dense(16,\n",
        "                 kernel_regularizer=regularizers.l2(0.002),\n",
        "                 activation=\"relu\"),\n",
        "    layers.Dense(16,\n",
        "                 kernel_regularizer=regularizers.l2(0.002),\n",
        "                 activation=\"relu\"),\n",
        "    layers.Dense(1, activation=\"sigmoid\")\n",
        "])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"binary_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "history_l2_reg = model.fit(\n",
        "    train_data, train_labels,\n",
        "    epochs=20, batch_size=512, validation_split=0.4)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gcdRYPGBM6W1"
      },
      "source": [
        "**Different weight regularizers available in Keras**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FkRMKY-OM6W1"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras import regularizers\n",
        "regularizers.l1(0.001)\n",
        "regularizers.l1_l2(l1=0.001, l2=0.001)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wCzHp9Y1M6W2"
      },
      "source": [
        "#### Adding dropout"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5A1SuyfuM6W2"
      },
      "source": [
        "**Adding dropout to the IMDB model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_XDUrpWKM6W2"
      },
      "outputs": [],
      "source": [
        "model = keras.Sequential([\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dropout(0.5),\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dropout(0.5),\n",
        "    layers.Dense(1, activation=\"sigmoid\")\n",
        "])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"binary_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "history_dropout = model.fit(\n",
        "    train_data, train_labels,\n",
        "    epochs=20, batch_size=512, validation_split=0.4)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7FLLv4B8M6W3"
      },
      "source": [
        "## Summary"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "chapter05_fundamentals-of-ml.i",
      "provenance": [],
      "toc_visible": true,
      "gpuType": "T4"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.0"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}