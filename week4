{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TX6jN39cRzcA"
      },
      "source": [
        "This is a companion notebook for the book [Deep Learning with Python, Second Edition](https://www.manning.com/books/deep-learning-with-python-second-edition?a_aid=keras&a_bid=76564dff). For readability, it only contains runnable code blocks and section titles, and omits everything else in the book: text paragraphs, figures, and pseudocode.\n",
        "\n",
        "**If you want to be able to follow what's going on, I recommend reading the notebook side by side with your copy of the book.**\n",
        "\n",
        "This notebook was generated for TensorFlow 2.6."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8latKBIeRzcE"
      },
      "source": [
        "# Getting started with neural networks: Classification and regression"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zDIrq4soRzcF"
      },
      "source": [
        "## Classifying movie reviews: A binary classification example"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "49s9Zv6YRzcF"
      },
      "source": [
        "### The IMDB dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3L6MoMXaRzcG"
      },
      "source": [
        "**Loading the IMDB dataset**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "TQ6NHE5oRzcG"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.datasets import imdb\n",
        "(train_data, train_labels), (test_data, test_labels) = imdb.load_data(\n",
        "    num_words=10000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "haXfK87zRzcH",
        "outputId": "35849ffe-ff9d-469a-9c52-8b185ce22c6e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1,\n",
              " 14,\n",
              " 22,\n",
              " 16,\n",
              " 43,\n",
              " 530,\n",
              " 973,\n",
              " 1622,\n",
              " 1385,\n",
              " 65,\n",
              " 458,\n",
              " 4468,\n",
              " 66,\n",
              " 3941,\n",
              " 4,\n",
              " 173,\n",
              " 36,\n",
              " 256,\n",
              " 5,\n",
              " 25,\n",
              " 100,\n",
              " 43,\n",
              " 838,\n",
              " 112,\n",
              " 50,\n",
              " 670,\n",
              " 2,\n",
              " 9,\n",
              " 35,\n",
              " 480,\n",
              " 284,\n",
              " 5,\n",
              " 150,\n",
              " 4,\n",
              " 172,\n",
              " 112,\n",
              " 167,\n",
              " 2,\n",
              " 336,\n",
              " 385,\n",
              " 39,\n",
              " 4,\n",
              " 172,\n",
              " 4536,\n",
              " 1111,\n",
              " 17,\n",
              " 546,\n",
              " 38,\n",
              " 13,\n",
              " 447,\n",
              " 4,\n",
              " 192,\n",
              " 50,\n",
              " 16,\n",
              " 6,\n",
              " 147,\n",
              " 2025,\n",
              " 19,\n",
              " 14,\n",
              " 22,\n",
              " 4,\n",
              " 1920,\n",
              " 4613,\n",
              " 469,\n",
              " 4,\n",
              " 22,\n",
              " 71,\n",
              " 87,\n",
              " 12,\n",
              " 16,\n",
              " 43,\n",
              " 530,\n",
              " 38,\n",
              " 76,\n",
              " 15,\n",
              " 13,\n",
              " 1247,\n",
              " 4,\n",
              " 22,\n",
              " 17,\n",
              " 515,\n",
              " 17,\n",
              " 12,\n",
              " 16,\n",
              " 626,\n",
              " 18,\n",
              " 2,\n",
              " 5,\n",
              " 62,\n",
              " 386,\n",
              " 12,\n",
              " 8,\n",
              " 316,\n",
              " 8,\n",
              " 106,\n",
              " 5,\n",
              " 4,\n",
              " 2223,\n",
              " 5244,\n",
              " 16,\n",
              " 480,\n",
              " 66,\n",
              " 3785,\n",
              " 33,\n",
              " 4,\n",
              " 130,\n",
              " 12,\n",
              " 16,\n",
              " 38,\n",
              " 619,\n",
              " 5,\n",
              " 25,\n",
              " 124,\n",
              " 51,\n",
              " 36,\n",
              " 135,\n",
              " 48,\n",
              " 25,\n",
              " 1415,\n",
              " 33,\n",
              " 6,\n",
              " 22,\n",
              " 12,\n",
              " 215,\n",
              " 28,\n",
              " 77,\n",
              " 52,\n",
              " 5,\n",
              " 14,\n",
              " 407,\n",
              " 16,\n",
              " 82,\n",
              " 2,\n",
              " 8,\n",
              " 4,\n",
              " 107,\n",
              " 117,\n",
              " 5952,\n",
              " 15,\n",
              " 256,\n",
              " 4,\n",
              " 2,\n",
              " 7,\n",
              " 3766,\n",
              " 5,\n",
              " 723,\n",
              " 36,\n",
              " 71,\n",
              " 43,\n",
              " 530,\n",
              " 476,\n",
              " 26,\n",
              " 400,\n",
              " 317,\n",
              " 46,\n",
              " 7,\n",
              " 4,\n",
              " 2,\n",
              " 1029,\n",
              " 13,\n",
              " 104,\n",
              " 88,\n",
              " 4,\n",
              " 381,\n",
              " 15,\n",
              " 297,\n",
              " 98,\n",
              " 32,\n",
              " 2071,\n",
              " 56,\n",
              " 26,\n",
              " 141,\n",
              " 6,\n",
              " 194,\n",
              " 7486,\n",
              " 18,\n",
              " 4,\n",
              " 226,\n",
              " 22,\n",
              " 21,\n",
              " 134,\n",
              " 476,\n",
              " 26,\n",
              " 480,\n",
              " 5,\n",
              " 144,\n",
              " 30,\n",
              " 5535,\n",
              " 18,\n",
              " 51,\n",
              " 36,\n",
              " 28,\n",
              " 224,\n",
              " 92,\n",
              " 25,\n",
              " 104,\n",
              " 4,\n",
              " 226,\n",
              " 65,\n",
              " 16,\n",
              " 38,\n",
              " 1334,\n",
              " 88,\n",
              " 12,\n",
              " 16,\n",
              " 283,\n",
              " 5,\n",
              " 16,\n",
              " 4472,\n",
              " 113,\n",
              " 103,\n",
              " 32,\n",
              " 15,\n",
              " 16,\n",
              " 5345,\n",
              " 19,\n",
              " 178,\n",
              " 32]"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "train_data[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "nqBOUm30RzcI",
        "outputId": "da04e543-9508-4b96-a469-0c223c5a0f61",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "train_labels[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "ay_mlNJERzcI",
        "outputId": "e2f516ec-0647-4b86-d334-e2d739cdca72",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9999"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "max([max(sequence) for sequence in train_data])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xF9vW98ARzcJ"
      },
      "source": [
        "**Decoding reviews back to text**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "eof7frYzRzcJ",
        "outputId": "b27d0f85-38cc-4216-8d5e-51b291be1d83",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb_word_index.json\n",
            "1641221/1641221 [==============================] - 1s 1us/step\n"
          ]
        }
      ],
      "source": [
        "word_index = imdb.get_word_index()\n",
        "reverse_word_index = dict(\n",
        "    [(value, key) for (key, value) in word_index.items()])\n",
        "decoded_review = \" \".join(\n",
        "    [reverse_word_index.get(i - 3, \"?\") for i in train_data[0]])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "decoded_review"
      ],
      "metadata": {
        "id": "KxbITdyKTNok",
        "outputId": "4d19fbc0-5885-4d27-8524-a7e511a7a203",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 123
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"? this film was just brilliant casting location scenery story direction everyone's really suited the part they played and you could just imagine being there robert ? is an amazing actor and now the same being director ? father came from the same scottish island as myself so i loved the fact there was a real connection with this film the witty remarks throughout the film were great it was just brilliant so much that i bought the film as soon as it was released for ? and would recommend it to everyone to watch and the fly fishing was amazing really cried at the end it was so sad and you know what they say if you cry at a film it must have been good and this definitely was also ? to the two little boy's that played the ? of norman and paul they were just brilliant children are often left out of the ? list i think because the stars that play them all grown up are such a big profile for the whole film but these children are amazing and should be praised for what they have done don't you think the whole story was so lovely because it was true and was someone's life after all that was shared with us all\""
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "word_index"
      ],
      "metadata": {
        "id": "ceupj3_gSPkP",
        "outputId": "4d57e725-12fb-4e84-afd0-f31897f68050",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'fawn': 34701,\n",
              " 'tsukino': 52006,\n",
              " 'nunnery': 52007,\n",
              " 'sonja': 16816,\n",
              " 'vani': 63951,\n",
              " 'woods': 1408,\n",
              " 'spiders': 16115,\n",
              " 'hanging': 2345,\n",
              " 'woody': 2289,\n",
              " 'trawling': 52008,\n",
              " \"hold's\": 52009,\n",
              " 'comically': 11307,\n",
              " 'localized': 40830,\n",
              " 'disobeying': 30568,\n",
              " \"'royale\": 52010,\n",
              " \"harpo's\": 40831,\n",
              " 'canet': 52011,\n",
              " 'aileen': 19313,\n",
              " 'acurately': 52012,\n",
              " \"diplomat's\": 52013,\n",
              " 'rickman': 25242,\n",
              " 'arranged': 6746,\n",
              " 'rumbustious': 52014,\n",
              " 'familiarness': 52015,\n",
              " \"spider'\": 52016,\n",
              " 'hahahah': 68804,\n",
              " \"wood'\": 52017,\n",
              " 'transvestism': 40833,\n",
              " \"hangin'\": 34702,\n",
              " 'bringing': 2338,\n",
              " 'seamier': 40834,\n",
              " 'wooded': 34703,\n",
              " 'bravora': 52018,\n",
              " 'grueling': 16817,\n",
              " 'wooden': 1636,\n",
              " 'wednesday': 16818,\n",
              " \"'prix\": 52019,\n",
              " 'altagracia': 34704,\n",
              " 'circuitry': 52020,\n",
              " 'crotch': 11585,\n",
              " 'busybody': 57766,\n",
              " \"tart'n'tangy\": 52021,\n",
              " 'burgade': 14129,\n",
              " 'thrace': 52023,\n",
              " \"tom's\": 11038,\n",
              " 'snuggles': 52025,\n",
              " 'francesco': 29114,\n",
              " 'complainers': 52027,\n",
              " 'templarios': 52125,\n",
              " '272': 40835,\n",
              " '273': 52028,\n",
              " 'zaniacs': 52130,\n",
              " '275': 34706,\n",
              " 'consenting': 27631,\n",
              " 'snuggled': 40836,\n",
              " 'inanimate': 15492,\n",
              " 'uality': 52030,\n",
              " 'bronte': 11926,\n",
              " 'errors': 4010,\n",
              " 'dialogs': 3230,\n",
              " \"yomada's\": 52031,\n",
              " \"madman's\": 34707,\n",
              " 'dialoge': 30585,\n",
              " 'usenet': 52033,\n",
              " 'videodrome': 40837,\n",
              " \"kid'\": 26338,\n",
              " 'pawed': 52034,\n",
              " \"'girlfriend'\": 30569,\n",
              " \"'pleasure\": 52035,\n",
              " \"'reloaded'\": 52036,\n",
              " \"kazakos'\": 40839,\n",
              " 'rocque': 52037,\n",
              " 'mailings': 52038,\n",
              " 'brainwashed': 11927,\n",
              " 'mcanally': 16819,\n",
              " \"tom''\": 52039,\n",
              " 'kurupt': 25243,\n",
              " 'affiliated': 21905,\n",
              " 'babaganoosh': 52040,\n",
              " \"noe's\": 40840,\n",
              " 'quart': 40841,\n",
              " 'kids': 359,\n",
              " 'uplifting': 5034,\n",
              " 'controversy': 7093,\n",
              " 'kida': 21906,\n",
              " 'kidd': 23379,\n",
              " \"error'\": 52041,\n",
              " 'neurologist': 52042,\n",
              " 'spotty': 18510,\n",
              " 'cobblers': 30570,\n",
              " 'projection': 9878,\n",
              " 'fastforwarding': 40842,\n",
              " 'sters': 52043,\n",
              " \"eggar's\": 52044,\n",
              " 'etherything': 52045,\n",
              " 'gateshead': 40843,\n",
              " 'airball': 34708,\n",
              " 'unsinkable': 25244,\n",
              " 'stern': 7180,\n",
              " \"cervi's\": 52046,\n",
              " 'dnd': 40844,\n",
              " 'dna': 11586,\n",
              " 'insecurity': 20598,\n",
              " \"'reboot'\": 52047,\n",
              " 'trelkovsky': 11037,\n",
              " 'jaekel': 52048,\n",
              " 'sidebars': 52049,\n",
              " \"sforza's\": 52050,\n",
              " 'distortions': 17633,\n",
              " 'mutinies': 52051,\n",
              " 'sermons': 30602,\n",
              " '7ft': 40846,\n",
              " 'boobage': 52052,\n",
              " \"o'bannon's\": 52053,\n",
              " 'populations': 23380,\n",
              " 'chulak': 52054,\n",
              " 'mesmerize': 27633,\n",
              " 'quinnell': 52055,\n",
              " 'yahoo': 10307,\n",
              " 'meteorologist': 52057,\n",
              " 'beswick': 42577,\n",
              " 'boorman': 15493,\n",
              " 'voicework': 40847,\n",
              " \"ster'\": 52058,\n",
              " 'blustering': 22922,\n",
              " 'hj': 52059,\n",
              " 'intake': 27634,\n",
              " 'morally': 5621,\n",
              " 'jumbling': 40849,\n",
              " 'bowersock': 52060,\n",
              " \"'porky's'\": 52061,\n",
              " 'gershon': 16821,\n",
              " 'ludicrosity': 40850,\n",
              " 'coprophilia': 52062,\n",
              " 'expressively': 40851,\n",
              " \"india's\": 19500,\n",
              " \"post's\": 34710,\n",
              " 'wana': 52063,\n",
              " 'wang': 5283,\n",
              " 'wand': 30571,\n",
              " 'wane': 25245,\n",
              " 'edgeways': 52321,\n",
              " 'titanium': 34711,\n",
              " 'pinta': 40852,\n",
              " 'want': 178,\n",
              " 'pinto': 30572,\n",
              " 'whoopdedoodles': 52065,\n",
              " 'tchaikovsky': 21908,\n",
              " 'travel': 2103,\n",
              " \"'victory'\": 52066,\n",
              " 'copious': 11928,\n",
              " 'gouge': 22433,\n",
              " \"chapters'\": 52067,\n",
              " 'barbra': 6702,\n",
              " 'uselessness': 30573,\n",
              " \"wan'\": 52068,\n",
              " 'assimilated': 27635,\n",
              " 'petiot': 16116,\n",
              " 'most\\x85and': 52069,\n",
              " 'dinosaurs': 3930,\n",
              " 'wrong': 352,\n",
              " 'seda': 52070,\n",
              " 'stollen': 52071,\n",
              " 'sentencing': 34712,\n",
              " 'ouroboros': 40853,\n",
              " 'assimilates': 40854,\n",
              " 'colorfully': 40855,\n",
              " 'glenne': 27636,\n",
              " 'dongen': 52072,\n",
              " 'subplots': 4760,\n",
              " 'kiloton': 52073,\n",
              " 'chandon': 23381,\n",
              " \"effect'\": 34713,\n",
              " 'snugly': 27637,\n",
              " 'kuei': 40856,\n",
              " 'welcomed': 9092,\n",
              " 'dishonor': 30071,\n",
              " 'concurrence': 52075,\n",
              " 'stoicism': 23382,\n",
              " \"guys'\": 14896,\n",
              " \"beroemd'\": 52077,\n",
              " 'butcher': 6703,\n",
              " \"melfi's\": 40857,\n",
              " 'aargh': 30623,\n",
              " 'playhouse': 20599,\n",
              " 'wickedly': 11308,\n",
              " 'fit': 1180,\n",
              " 'labratory': 52078,\n",
              " 'lifeline': 40859,\n",
              " 'screaming': 1927,\n",
              " 'fix': 4287,\n",
              " 'cineliterate': 52079,\n",
              " 'fic': 52080,\n",
              " 'fia': 52081,\n",
              " 'fig': 34714,\n",
              " 'fmvs': 52082,\n",
              " 'fie': 52083,\n",
              " 'reentered': 52084,\n",
              " 'fin': 30574,\n",
              " 'doctresses': 52085,\n",
              " 'fil': 52086,\n",
              " 'zucker': 12606,\n",
              " 'ached': 31931,\n",
              " 'counsil': 52088,\n",
              " 'paterfamilias': 52089,\n",
              " 'songwriter': 13885,\n",
              " 'shivam': 34715,\n",
              " 'hurting': 9654,\n",
              " 'effects': 299,\n",
              " 'slauther': 52090,\n",
              " \"'flame'\": 52091,\n",
              " 'sommerset': 52092,\n",
              " 'interwhined': 52093,\n",
              " 'whacking': 27638,\n",
              " 'bartok': 52094,\n",
              " 'barton': 8775,\n",
              " 'frewer': 21909,\n",
              " \"fi'\": 52095,\n",
              " 'ingrid': 6192,\n",
              " 'stribor': 30575,\n",
              " 'approporiately': 52096,\n",
              " 'wobblyhand': 52097,\n",
              " 'tantalisingly': 52098,\n",
              " 'ankylosaurus': 52099,\n",
              " 'parasites': 17634,\n",
              " 'childen': 52100,\n",
              " \"jenkins'\": 52101,\n",
              " 'metafiction': 52102,\n",
              " 'golem': 17635,\n",
              " 'indiscretion': 40860,\n",
              " \"reeves'\": 23383,\n",
              " \"inamorata's\": 57781,\n",
              " 'brittannica': 52104,\n",
              " 'adapt': 7916,\n",
              " \"russo's\": 30576,\n",
              " 'guitarists': 48246,\n",
              " 'abbott': 10553,\n",
              " 'abbots': 40861,\n",
              " 'lanisha': 17649,\n",
              " 'magickal': 40863,\n",
              " 'mattter': 52105,\n",
              " \"'willy\": 52106,\n",
              " 'pumpkins': 34716,\n",
              " 'stuntpeople': 52107,\n",
              " 'estimate': 30577,\n",
              " 'ugghhh': 40864,\n",
              " 'gameplay': 11309,\n",
              " \"wern't\": 52108,\n",
              " \"n'sync\": 40865,\n",
              " 'sickeningly': 16117,\n",
              " 'chiara': 40866,\n",
              " 'disturbed': 4011,\n",
              " 'portmanteau': 40867,\n",
              " 'ineffectively': 52109,\n",
              " \"duchonvey's\": 82143,\n",
              " \"nasty'\": 37519,\n",
              " 'purpose': 1285,\n",
              " 'lazers': 52112,\n",
              " 'lightened': 28105,\n",
              " 'kaliganj': 52113,\n",
              " 'popularism': 52114,\n",
              " \"damme's\": 18511,\n",
              " 'stylistics': 30578,\n",
              " 'mindgaming': 52115,\n",
              " 'spoilerish': 46449,\n",
              " \"'corny'\": 52117,\n",
              " 'boerner': 34718,\n",
              " 'olds': 6792,\n",
              " 'bakelite': 52118,\n",
              " 'renovated': 27639,\n",
              " 'forrester': 27640,\n",
              " \"lumiere's\": 52119,\n",
              " 'gaskets': 52024,\n",
              " 'needed': 884,\n",
              " 'smight': 34719,\n",
              " 'master': 1297,\n",
              " \"edie's\": 25905,\n",
              " 'seeber': 40868,\n",
              " 'hiya': 52120,\n",
              " 'fuzziness': 52121,\n",
              " 'genesis': 14897,\n",
              " 'rewards': 12607,\n",
              " 'enthrall': 30579,\n",
              " \"'about\": 40869,\n",
              " \"recollection's\": 52122,\n",
              " 'mutilated': 11039,\n",
              " 'fatherlands': 52123,\n",
              " \"fischer's\": 52124,\n",
              " 'positively': 5399,\n",
              " '270': 34705,\n",
              " 'ahmed': 34720,\n",
              " 'zatoichi': 9836,\n",
              " 'bannister': 13886,\n",
              " 'anniversaries': 52127,\n",
              " \"helm's\": 30580,\n",
              " \"'work'\": 52128,\n",
              " 'exclaimed': 34721,\n",
              " \"'unfunny'\": 52129,\n",
              " '274': 52029,\n",
              " 'feeling': 544,\n",
              " \"wanda's\": 52131,\n",
              " 'dolan': 33266,\n",
              " '278': 52133,\n",
              " 'peacoat': 52134,\n",
              " 'brawny': 40870,\n",
              " 'mishra': 40871,\n",
              " 'worlders': 40872,\n",
              " 'protags': 52135,\n",
              " 'skullcap': 52136,\n",
              " 'dastagir': 57596,\n",
              " 'affairs': 5622,\n",
              " 'wholesome': 7799,\n",
              " 'hymen': 52137,\n",
              " 'paramedics': 25246,\n",
              " 'unpersons': 52138,\n",
              " 'heavyarms': 52139,\n",
              " 'affaire': 52140,\n",
              " 'coulisses': 52141,\n",
              " 'hymer': 40873,\n",
              " 'kremlin': 52142,\n",
              " 'shipments': 30581,\n",
              " 'pixilated': 52143,\n",
              " \"'00s\": 30582,\n",
              " 'diminishing': 18512,\n",
              " 'cinematic': 1357,\n",
              " 'resonates': 14898,\n",
              " 'simplify': 40874,\n",
              " \"nature'\": 40875,\n",
              " 'temptresses': 40876,\n",
              " 'reverence': 16822,\n",
              " 'resonated': 19502,\n",
              " 'dailey': 34722,\n",
              " '2\\x85': 52144,\n",
              " 'treize': 27641,\n",
              " 'majo': 52145,\n",
              " 'kiya': 21910,\n",
              " 'woolnough': 52146,\n",
              " 'thanatos': 39797,\n",
              " 'sandoval': 35731,\n",
              " 'dorama': 40879,\n",
              " \"o'shaughnessy\": 52147,\n",
              " 'tech': 4988,\n",
              " 'fugitives': 32018,\n",
              " 'teck': 30583,\n",
              " \"'e'\": 76125,\n",
              " 'doesn’t': 40881,\n",
              " 'purged': 52149,\n",
              " 'saying': 657,\n",
              " \"martians'\": 41095,\n",
              " 'norliss': 23418,\n",
              " 'dickey': 27642,\n",
              " 'dicker': 52152,\n",
              " \"'sependipity\": 52153,\n",
              " 'padded': 8422,\n",
              " 'ordell': 57792,\n",
              " \"sturges'\": 40882,\n",
              " 'independentcritics': 52154,\n",
              " 'tempted': 5745,\n",
              " \"atkinson's\": 34724,\n",
              " 'hounded': 25247,\n",
              " 'apace': 52155,\n",
              " 'clicked': 15494,\n",
              " \"'humor'\": 30584,\n",
              " \"martino's\": 17177,\n",
              " \"'supporting\": 52156,\n",
              " 'warmongering': 52032,\n",
              " \"zemeckis's\": 34725,\n",
              " 'lube': 21911,\n",
              " 'shocky': 52157,\n",
              " 'plate': 7476,\n",
              " 'plata': 40883,\n",
              " 'sturgess': 40884,\n",
              " \"nerds'\": 40885,\n",
              " 'plato': 20600,\n",
              " 'plath': 34726,\n",
              " 'platt': 40886,\n",
              " 'mcnab': 52159,\n",
              " 'clumsiness': 27643,\n",
              " 'altogether': 3899,\n",
              " 'massacring': 42584,\n",
              " 'bicenntinial': 52160,\n",
              " 'skaal': 40887,\n",
              " 'droning': 14360,\n",
              " 'lds': 8776,\n",
              " 'jaguar': 21912,\n",
              " \"cale's\": 34727,\n",
              " 'nicely': 1777,\n",
              " 'mummy': 4588,\n",
              " \"lot's\": 18513,\n",
              " 'patch': 10086,\n",
              " 'kerkhof': 50202,\n",
              " \"leader's\": 52161,\n",
              " \"'movie\": 27644,\n",
              " 'uncomfirmed': 52162,\n",
              " 'heirloom': 40888,\n",
              " 'wrangle': 47360,\n",
              " 'emotion\\x85': 52163,\n",
              " \"'stargate'\": 52164,\n",
              " 'pinoy': 40889,\n",
              " 'conchatta': 40890,\n",
              " 'broeke': 41128,\n",
              " 'advisedly': 40891,\n",
              " \"barker's\": 17636,\n",
              " 'descours': 52166,\n",
              " 'lots': 772,\n",
              " 'lotr': 9259,\n",
              " 'irs': 9879,\n",
              " 'lott': 52167,\n",
              " 'xvi': 40892,\n",
              " 'irk': 34728,\n",
              " 'irl': 52168,\n",
              " 'ira': 6887,\n",
              " 'belzer': 21913,\n",
              " 'irc': 52169,\n",
              " 'ire': 27645,\n",
              " 'requisites': 40893,\n",
              " 'discipline': 7693,\n",
              " 'lyoko': 52961,\n",
              " 'extend': 11310,\n",
              " 'nature': 873,\n",
              " \"'dickie'\": 52170,\n",
              " 'optimist': 40894,\n",
              " 'lapping': 30586,\n",
              " 'superficial': 3900,\n",
              " 'vestment': 52171,\n",
              " 'extent': 2823,\n",
              " 'tendons': 52172,\n",
              " \"heller's\": 52173,\n",
              " 'quagmires': 52174,\n",
              " 'miyako': 52175,\n",
              " 'moocow': 20601,\n",
              " \"coles'\": 52176,\n",
              " 'lookit': 40895,\n",
              " 'ravenously': 52177,\n",
              " 'levitating': 40896,\n",
              " 'perfunctorily': 52178,\n",
              " 'lookin': 30587,\n",
              " \"lot'\": 40898,\n",
              " 'lookie': 52179,\n",
              " 'fearlessly': 34870,\n",
              " 'libyan': 52181,\n",
              " 'fondles': 40899,\n",
              " 'gopher': 35714,\n",
              " 'wearying': 40901,\n",
              " \"nz's\": 52182,\n",
              " 'minuses': 27646,\n",
              " 'puposelessly': 52183,\n",
              " 'shandling': 52184,\n",
              " 'decapitates': 31268,\n",
              " 'humming': 11929,\n",
              " \"'nother\": 40902,\n",
              " 'smackdown': 21914,\n",
              " 'underdone': 30588,\n",
              " 'frf': 40903,\n",
              " 'triviality': 52185,\n",
              " 'fro': 25248,\n",
              " 'bothers': 8777,\n",
              " \"'kensington\": 52186,\n",
              " 'much': 73,\n",
              " 'muco': 34730,\n",
              " 'wiseguy': 22615,\n",
              " \"richie's\": 27648,\n",
              " 'tonino': 40904,\n",
              " 'unleavened': 52187,\n",
              " 'fry': 11587,\n",
              " \"'tv'\": 40905,\n",
              " 'toning': 40906,\n",
              " 'obese': 14361,\n",
              " 'sensationalized': 30589,\n",
              " 'spiv': 40907,\n",
              " 'spit': 6259,\n",
              " 'arkin': 7364,\n",
              " 'charleton': 21915,\n",
              " 'jeon': 16823,\n",
              " 'boardroom': 21916,\n",
              " 'doubts': 4989,\n",
              " 'spin': 3084,\n",
              " 'hepo': 53083,\n",
              " 'wildcat': 27649,\n",
              " 'venoms': 10584,\n",
              " 'misconstrues': 52191,\n",
              " 'mesmerising': 18514,\n",
              " 'misconstrued': 40908,\n",
              " 'rescinds': 52192,\n",
              " 'prostrate': 52193,\n",
              " 'majid': 40909,\n",
              " 'climbed': 16479,\n",
              " 'canoeing': 34731,\n",
              " 'majin': 52195,\n",
              " 'animie': 57804,\n",
              " 'sylke': 40910,\n",
              " 'conditioned': 14899,\n",
              " 'waddell': 40911,\n",
              " '3\\x85': 52196,\n",
              " 'hyperdrive': 41188,\n",
              " 'conditioner': 34732,\n",
              " 'bricklayer': 53153,\n",
              " 'hong': 2576,\n",
              " 'memoriam': 52198,\n",
              " 'inventively': 30592,\n",
              " \"levant's\": 25249,\n",
              " 'portobello': 20638,\n",
              " 'remand': 52200,\n",
              " 'mummified': 19504,\n",
              " 'honk': 27650,\n",
              " 'spews': 19505,\n",
              " 'visitations': 40912,\n",
              " 'mummifies': 52201,\n",
              " 'cavanaugh': 25250,\n",
              " 'zeon': 23385,\n",
              " \"jungle's\": 40913,\n",
              " 'viertel': 34733,\n",
              " 'frenchmen': 27651,\n",
              " 'torpedoes': 52202,\n",
              " 'schlessinger': 52203,\n",
              " 'torpedoed': 34734,\n",
              " 'blister': 69876,\n",
              " 'cinefest': 52204,\n",
              " 'furlough': 34735,\n",
              " 'mainsequence': 52205,\n",
              " 'mentors': 40914,\n",
              " 'academic': 9094,\n",
              " 'stillness': 20602,\n",
              " 'academia': 40915,\n",
              " 'lonelier': 52206,\n",
              " 'nibby': 52207,\n",
              " \"losers'\": 52208,\n",
              " 'cineastes': 40916,\n",
              " 'corporate': 4449,\n",
              " 'massaging': 40917,\n",
              " 'bellow': 30593,\n",
              " 'absurdities': 19506,\n",
              " 'expetations': 53241,\n",
              " 'nyfiken': 40918,\n",
              " 'mehras': 75638,\n",
              " 'lasse': 52209,\n",
              " 'visability': 52210,\n",
              " 'militarily': 33946,\n",
              " \"elder'\": 52211,\n",
              " 'gainsbourg': 19023,\n",
              " 'hah': 20603,\n",
              " 'hai': 13420,\n",
              " 'haj': 34736,\n",
              " 'hak': 25251,\n",
              " 'hal': 4311,\n",
              " 'ham': 4892,\n",
              " 'duffer': 53259,\n",
              " 'haa': 52213,\n",
              " 'had': 66,\n",
              " 'advancement': 11930,\n",
              " 'hag': 16825,\n",
              " \"hand'\": 25252,\n",
              " 'hay': 13421,\n",
              " 'mcnamara': 20604,\n",
              " \"mozart's\": 52214,\n",
              " 'duffel': 30731,\n",
              " 'haq': 30594,\n",
              " 'har': 13887,\n",
              " 'has': 44,\n",
              " 'hat': 2401,\n",
              " 'hav': 40919,\n",
              " 'haw': 30595,\n",
              " 'figtings': 52215,\n",
              " 'elders': 15495,\n",
              " 'underpanted': 52216,\n",
              " 'pninson': 52217,\n",
              " 'unequivocally': 27652,\n",
              " \"barbara's\": 23673,\n",
              " \"bello'\": 52219,\n",
              " 'indicative': 12997,\n",
              " 'yawnfest': 40920,\n",
              " 'hexploitation': 52220,\n",
              " \"loder's\": 52221,\n",
              " 'sleuthing': 27653,\n",
              " \"justin's\": 32622,\n",
              " \"'ball\": 52222,\n",
              " \"'summer\": 52223,\n",
              " \"'demons'\": 34935,\n",
              " \"mormon's\": 52225,\n",
              " \"laughton's\": 34737,\n",
              " 'debell': 52226,\n",
              " 'shipyard': 39724,\n",
              " 'unabashedly': 30597,\n",
              " 'disks': 40401,\n",
              " 'crowd': 2290,\n",
              " 'crowe': 10087,\n",
              " \"vancouver's\": 56434,\n",
              " 'mosques': 34738,\n",
              " 'crown': 6627,\n",
              " 'culpas': 52227,\n",
              " 'crows': 27654,\n",
              " 'surrell': 53344,\n",
              " 'flowless': 52229,\n",
              " 'sheirk': 52230,\n",
              " \"'three\": 40923,\n",
              " \"peterson'\": 52231,\n",
              " 'ooverall': 52232,\n",
              " 'perchance': 40924,\n",
              " 'bottom': 1321,\n",
              " 'chabert': 53363,\n",
              " 'sneha': 52233,\n",
              " 'inhuman': 13888,\n",
              " 'ichii': 52234,\n",
              " 'ursla': 52235,\n",
              " 'completly': 30598,\n",
              " 'moviedom': 40925,\n",
              " 'raddick': 52236,\n",
              " 'brundage': 51995,\n",
              " 'brigades': 40926,\n",
              " 'starring': 1181,\n",
              " \"'goal'\": 52237,\n",
              " 'caskets': 52238,\n",
              " 'willcock': 52239,\n",
              " \"threesome's\": 52240,\n",
              " \"mosque'\": 52241,\n",
              " \"cover's\": 52242,\n",
              " 'spaceships': 17637,\n",
              " 'anomalous': 40927,\n",
              " 'ptsd': 27655,\n",
              " 'shirdan': 52243,\n",
              " 'obscenity': 21962,\n",
              " 'lemmings': 30599,\n",
              " 'duccio': 30600,\n",
              " \"levene's\": 52244,\n",
              " \"'gorby'\": 52245,\n",
              " \"teenager's\": 25255,\n",
              " 'marshall': 5340,\n",
              " 'honeymoon': 9095,\n",
              " 'shoots': 3231,\n",
              " 'despised': 12258,\n",
              " 'okabasho': 52246,\n",
              " 'fabric': 8289,\n",
              " 'cannavale': 18515,\n",
              " 'raped': 3537,\n",
              " \"tutt's\": 52247,\n",
              " 'grasping': 17638,\n",
              " 'despises': 18516,\n",
              " \"thief's\": 40928,\n",
              " 'rapes': 8926,\n",
              " 'raper': 52248,\n",
              " \"eyre'\": 27656,\n",
              " 'walchek': 52249,\n",
              " \"elmo's\": 23386,\n",
              " 'perfumes': 40929,\n",
              " 'spurting': 21918,\n",
              " \"exposition'\\x85\": 52250,\n",
              " 'denoting': 52251,\n",
              " 'thesaurus': 34740,\n",
              " \"shoot'\": 40930,\n",
              " 'bonejack': 49759,\n",
              " 'simpsonian': 52253,\n",
              " 'hebetude': 30601,\n",
              " \"hallow's\": 34741,\n",
              " 'desperation\\x85': 52254,\n",
              " 'incinerator': 34742,\n",
              " 'congratulations': 10308,\n",
              " 'humbled': 52255,\n",
              " \"else's\": 5924,\n",
              " 'trelkovski': 40845,\n",
              " \"rape'\": 52256,\n",
              " \"'chapters'\": 59386,\n",
              " '1600s': 52257,\n",
              " 'martian': 7253,\n",
              " 'nicest': 25256,\n",
              " 'eyred': 52259,\n",
              " 'passenger': 9457,\n",
              " 'disgrace': 6041,\n",
              " 'moderne': 52260,\n",
              " 'barrymore': 5120,\n",
              " 'yankovich': 52261,\n",
              " 'moderns': 40931,\n",
              " 'studliest': 52262,\n",
              " 'bedsheet': 52263,\n",
              " 'decapitation': 14900,\n",
              " 'slurring': 52264,\n",
              " \"'nunsploitation'\": 52265,\n",
              " \"'character'\": 34743,\n",
              " 'cambodia': 9880,\n",
              " 'rebelious': 52266,\n",
              " 'pasadena': 27657,\n",
              " 'crowne': 40932,\n",
              " \"'bedchamber\": 52267,\n",
              " 'conjectural': 52268,\n",
              " 'appologize': 52269,\n",
              " 'halfassing': 52270,\n",
              " 'paycheque': 57816,\n",
              " 'palms': 20606,\n",
              " \"'islands\": 52271,\n",
              " 'hawked': 40933,\n",
              " 'palme': 21919,\n",
              " 'conservatively': 40934,\n",
              " 'larp': 64007,\n",
              " 'palma': 5558,\n",
              " 'smelling': 21920,\n",
              " 'aragorn': 12998,\n",
              " 'hawker': 52272,\n",
              " 'hawkes': 52273,\n",
              " 'explosions': 3975,\n",
              " 'loren': 8059,\n",
              " \"pyle's\": 52274,\n",
              " 'shootout': 6704,\n",
              " \"mike's\": 18517,\n",
              " \"driscoll's\": 52275,\n",
              " 'cogsworth': 40935,\n",
              " \"britian's\": 52276,\n",
              " 'childs': 34744,\n",
              " \"portrait's\": 52277,\n",
              " 'chain': 3626,\n",
              " 'whoever': 2497,\n",
              " 'puttered': 52278,\n",
              " 'childe': 52279,\n",
              " 'maywether': 52280,\n",
              " 'chair': 3036,\n",
              " \"rance's\": 52281,\n",
              " 'machu': 34745,\n",
              " 'ballet': 4517,\n",
              " 'grapples': 34746,\n",
              " 'summerize': 76152,\n",
              " 'freelance': 30603,\n",
              " \"andrea's\": 52283,\n",
              " '\\x91very': 52284,\n",
              " 'coolidge': 45879,\n",
              " 'mache': 18518,\n",
              " 'balled': 52285,\n",
              " 'grappled': 40937,\n",
              " 'macha': 18519,\n",
              " 'underlining': 21921,\n",
              " 'macho': 5623,\n",
              " 'oversight': 19507,\n",
              " 'machi': 25257,\n",
              " 'verbally': 11311,\n",
              " 'tenacious': 21922,\n",
              " 'windshields': 40938,\n",
              " 'paychecks': 18557,\n",
              " 'jerk': 3396,\n",
              " \"good'\": 11931,\n",
              " 'prancer': 34748,\n",
              " 'prances': 21923,\n",
              " 'olympus': 52286,\n",
              " 'lark': 21924,\n",
              " 'embark': 10785,\n",
              " 'gloomy': 7365,\n",
              " 'jehaan': 52287,\n",
              " 'turaqui': 52288,\n",
              " \"child'\": 20607,\n",
              " 'locked': 2894,\n",
              " 'pranced': 52289,\n",
              " 'exact': 2588,\n",
              " 'unattuned': 52290,\n",
              " 'minute': 783,\n",
              " 'skewed': 16118,\n",
              " 'hodgins': 40940,\n",
              " 'skewer': 34749,\n",
              " 'think\\x85': 52291,\n",
              " 'rosenstein': 38765,\n",
              " 'helmit': 52292,\n",
              " 'wrestlemanias': 34750,\n",
              " 'hindered': 16826,\n",
              " \"martha's\": 30604,\n",
              " 'cheree': 52293,\n",
              " \"pluckin'\": 52294,\n",
              " 'ogles': 40941,\n",
              " 'heavyweight': 11932,\n",
              " 'aada': 82190,\n",
              " 'chopping': 11312,\n",
              " 'strongboy': 61534,\n",
              " 'hegemonic': 41342,\n",
              " 'adorns': 40942,\n",
              " 'xxth': 41346,\n",
              " 'nobuhiro': 34751,\n",
              " 'capitães': 52298,\n",
              " 'kavogianni': 52299,\n",
              " 'antwerp': 13422,\n",
              " 'celebrated': 6538,\n",
              " 'roarke': 52300,\n",
              " 'baggins': 40943,\n",
              " 'cheeseburgers': 31270,\n",
              " 'matras': 52301,\n",
              " \"nineties'\": 52302,\n",
              " \"'craig'\": 52303,\n",
              " 'celebrates': 12999,\n",
              " 'unintentionally': 3383,\n",
              " 'drafted': 14362,\n",
              " 'climby': 52304,\n",
              " '303': 52305,\n",
              " 'oldies': 18520,\n",
              " 'climbs': 9096,\n",
              " 'honour': 9655,\n",
              " 'plucking': 34752,\n",
              " '305': 30074,\n",
              " 'address': 5514,\n",
              " 'menjou': 40944,\n",
              " \"'freak'\": 42592,\n",
              " 'dwindling': 19508,\n",
              " 'benson': 9458,\n",
              " 'white’s': 52307,\n",
              " 'shamelessness': 40945,\n",
              " 'impacted': 21925,\n",
              " 'upatz': 52308,\n",
              " 'cusack': 3840,\n",
              " \"flavia's\": 37567,\n",
              " 'effette': 52309,\n",
              " 'influx': 34753,\n",
              " 'boooooooo': 52310,\n",
              " 'dimitrova': 52311,\n",
              " 'houseman': 13423,\n",
              " 'bigas': 25259,\n",
              " 'boylen': 52312,\n",
              " 'phillipenes': 52313,\n",
              " 'fakery': 40946,\n",
              " \"grandpa's\": 27658,\n",
              " 'darnell': 27659,\n",
              " 'undergone': 19509,\n",
              " 'handbags': 52315,\n",
              " 'perished': 21926,\n",
              " 'pooped': 37778,\n",
              " 'vigour': 27660,\n",
              " 'opposed': 3627,\n",
              " 'etude': 52316,\n",
              " \"caine's\": 11799,\n",
              " 'doozers': 52317,\n",
              " 'photojournals': 34754,\n",
              " 'perishes': 52318,\n",
              " 'constrains': 34755,\n",
              " 'migenes': 40948,\n",
              " 'consoled': 30605,\n",
              " 'alastair': 16827,\n",
              " 'wvs': 52319,\n",
              " 'ooooooh': 52320,\n",
              " 'approving': 34756,\n",
              " 'consoles': 40949,\n",
              " 'disparagement': 52064,\n",
              " 'futureistic': 52322,\n",
              " 'rebounding': 52323,\n",
              " \"'date\": 52324,\n",
              " 'gregoire': 52325,\n",
              " 'rutherford': 21927,\n",
              " 'americanised': 34757,\n",
              " 'novikov': 82196,\n",
              " 'following': 1042,\n",
              " 'munroe': 34758,\n",
              " \"morita'\": 52326,\n",
              " 'christenssen': 52327,\n",
              " 'oatmeal': 23106,\n",
              " 'fossey': 25260,\n",
              " 'livered': 40950,\n",
              " 'listens': 13000,\n",
              " \"'marci\": 76164,\n",
              " \"otis's\": 52330,\n",
              " 'thanking': 23387,\n",
              " 'maude': 16019,\n",
              " 'extensions': 34759,\n",
              " 'ameteurish': 52332,\n",
              " \"commender's\": 52333,\n",
              " 'agricultural': 27661,\n",
              " 'convincingly': 4518,\n",
              " 'fueled': 17639,\n",
              " 'mahattan': 54014,\n",
              " \"paris's\": 40952,\n",
              " 'vulkan': 52336,\n",
              " 'stapes': 52337,\n",
              " 'odysessy': 52338,\n",
              " 'harmon': 12259,\n",
              " 'surfing': 4252,\n",
              " 'halloran': 23494,\n",
              " 'unbelieveably': 49580,\n",
              " \"'offed'\": 52339,\n",
              " 'quadrant': 30607,\n",
              " 'inhabiting': 19510,\n",
              " 'nebbish': 34760,\n",
              " 'forebears': 40953,\n",
              " 'skirmish': 34761,\n",
              " 'ocassionally': 52340,\n",
              " \"'resist\": 52341,\n",
              " 'impactful': 21928,\n",
              " 'spicier': 52342,\n",
              " 'touristy': 40954,\n",
              " \"'football'\": 52343,\n",
              " 'webpage': 40955,\n",
              " 'exurbia': 52345,\n",
              " 'jucier': 52346,\n",
              " 'professors': 14901,\n",
              " 'structuring': 34762,\n",
              " 'jig': 30608,\n",
              " 'overlord': 40956,\n",
              " 'disconnect': 25261,\n",
              " 'sniffle': 82201,\n",
              " 'slimeball': 40957,\n",
              " 'jia': 40958,\n",
              " 'milked': 16828,\n",
              " 'banjoes': 40959,\n",
              " 'jim': 1237,\n",
              " 'workforces': 52348,\n",
              " 'jip': 52349,\n",
              " 'rotweiller': 52350,\n",
              " 'mundaneness': 34763,\n",
              " \"'ninja'\": 52351,\n",
              " \"dead'\": 11040,\n",
              " \"cipriani's\": 40960,\n",
              " 'modestly': 20608,\n",
              " \"professor'\": 52352,\n",
              " 'shacked': 40961,\n",
              " 'bashful': 34764,\n",
              " 'sorter': 23388,\n",
              " 'overpowering': 16120,\n",
              " 'workmanlike': 18521,\n",
              " 'henpecked': 27662,\n",
              " 'sorted': 18522,\n",
              " \"jōb's\": 52354,\n",
              " \"'always\": 52355,\n",
              " \"'baptists\": 34765,\n",
              " 'dreamcatchers': 52356,\n",
              " \"'silence'\": 52357,\n",
              " 'hickory': 21929,\n",
              " 'fun\\x97yet': 52358,\n",
              " 'breakumentary': 52359,\n",
              " 'didn': 15496,\n",
              " 'didi': 52360,\n",
              " 'pealing': 52361,\n",
              " 'dispite': 40962,\n",
              " \"italy's\": 25262,\n",
              " 'instability': 21930,\n",
              " 'quarter': 6539,\n",
              " 'quartet': 12608,\n",
              " 'padmé': 52362,\n",
              " \"'bleedmedry\": 52363,\n",
              " 'pahalniuk': 52364,\n",
              " 'honduras': 52365,\n",
              " 'bursting': 10786,\n",
              " \"pablo's\": 41465,\n",
              " 'irremediably': 52367,\n",
              " 'presages': 40963,\n",
              " 'bowlegged': 57832,\n",
              " 'dalip': 65183,\n",
              " 'entering': 6260,\n",
              " 'newsradio': 76172,\n",
              " 'presaged': 54150,\n",
              " \"giallo's\": 27663,\n",
              " 'bouyant': 40964,\n",
              " 'amerterish': 52368,\n",
              " 'rajni': 18523,\n",
              " 'leeves': 30610,\n",
              " 'macauley': 34767,\n",
              " 'seriously': 612,\n",
              " 'sugercoma': 52369,\n",
              " 'grimstead': 52370,\n",
              " \"'fairy'\": 52371,\n",
              " 'zenda': 30611,\n",
              " \"'twins'\": 52372,\n",
              " 'realisation': 17640,\n",
              " 'highsmith': 27664,\n",
              " 'raunchy': 7817,\n",
              " 'incentives': 40965,\n",
              " 'flatson': 52374,\n",
              " 'snooker': 35097,\n",
              " 'crazies': 16829,\n",
              " 'crazier': 14902,\n",
              " 'grandma': 7094,\n",
              " 'napunsaktha': 52375,\n",
              " 'workmanship': 30612,\n",
              " 'reisner': 52376,\n",
              " \"sanford's\": 61306,\n",
              " '\\x91doña': 52377,\n",
              " 'modest': 6108,\n",
              " \"everything's\": 19153,\n",
              " 'hamer': 40966,\n",
              " \"couldn't'\": 52379,\n",
              " 'quibble': 13001,\n",
              " 'socking': 52380,\n",
              " 'tingler': 21931,\n",
              " 'gutman': 52381,\n",
              " 'lachlan': 40967,\n",
              " 'tableaus': 52382,\n",
              " 'headbanger': 52383,\n",
              " 'spoken': 2847,\n",
              " 'cerebrally': 34768,\n",
              " \"'road\": 23490,\n",
              " 'tableaux': 21932,\n",
              " \"proust's\": 40968,\n",
              " 'periodical': 40969,\n",
              " \"shoveller's\": 52385,\n",
              " 'tamara': 25263,\n",
              " 'affords': 17641,\n",
              " 'concert': 3249,\n",
              " \"yara's\": 87955,\n",
              " 'someome': 52386,\n",
              " 'lingering': 8424,\n",
              " \"abraham's\": 41511,\n",
              " 'beesley': 34769,\n",
              " 'cherbourg': 34770,\n",
              " 'kagan': 28624,\n",
              " 'snatch': 9097,\n",
              " \"miyazaki's\": 9260,\n",
              " 'absorbs': 25264,\n",
              " \"koltai's\": 40970,\n",
              " 'tingled': 64027,\n",
              " 'crossroads': 19511,\n",
              " 'rehab': 16121,\n",
              " 'falworth': 52389,\n",
              " 'sequals': 52390,\n",
              " ...}"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "word_index['sorted']"
      ],
      "metadata": {
        "id": "dMIuMovHSonF",
        "outputId": "69be9d5d-18c8-42ca-848d-0913315f1ef8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "18522"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reverse_word_index[18522]"
      ],
      "metadata": {
        "id": "lNqvFtIbSohM",
        "outputId": "a959fe71-1132-4c8a-951a-fc8e2c2d6bda",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'sorted'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hXeX6q0NRzcJ"
      },
      "source": [
        "### Preparing the data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TE-FzV4BRzcJ"
      },
      "source": [
        "**Encoding the integer sequences via multi-hot encoding**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data.shape"
      ],
      "metadata": {
        "id": "yOuxgcC0TWNP",
        "outputId": "7326b50c-acd0-43af-e8d4-27f8ab57f786",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(25000,)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(train_data[0])"
      ],
      "metadata": {
        "id": "K3PXkSwdTZ1c",
        "outputId": "78fde55c-a042-42bd-fb3a-9eedf255a003",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "218"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(train_data[1])"
      ],
      "metadata": {
        "id": "qGzrUf42TeWW",
        "outputId": "81ccbaf4-afbe-4e2a-b4ff-cd8b7e3c787b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "189"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "MEEbd3cCRzcK"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "def vectorize_sequences(sequences, dimension=10000):\n",
        "    results = np.zeros((len(sequences), dimension))\n",
        "    for i, sequence in enumerate(sequences):\n",
        "        for j in sequence:\n",
        "            results[i, j] = 1.\n",
        "    return results\n",
        "x_train = vectorize_sequences(train_data)\n",
        "x_test = vectorize_sequences(test_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LCJwXePpRzcK"
      },
      "outputs": [],
      "source": [
        "x_train[0]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.shape"
      ],
      "metadata": {
        "id": "WUrWTAXUT-T3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "nrfkpmM0RzcK"
      },
      "outputs": [],
      "source": [
        "y_train = np.asarray(train_labels).astype(\"float32\")\n",
        "y_test = np.asarray(test_labels).astype(\"float32\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dmqck3mdRzcK"
      },
      "source": [
        "### Building your model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pPYk7VUCRzcK"
      },
      "source": [
        "**Model definition**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#two hidden layers\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = keras.Sequential([\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(1, activation=\"sigmoid\")\n",
        "])"
      ],
      "metadata": {
        "id": "r2vFtctPW7nf"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "I9UzogUxRzcL"
      },
      "outputs": [],
      "source": [
        "#three hidden layers\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model1 = keras.Sequential([\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(1, activation=\"sigmoid\")\n",
        "])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#one hidden layers\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model2 = keras.Sequential([\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(1, activation=\"sigmoid\")\n",
        "])"
      ],
      "metadata": {
        "id": "fekVSdjnVFoG"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XqrVPLI8RzcL"
      },
      "source": [
        "**Compiling the model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "fhdRpMBQRzcL"
      },
      "outputs": [],
      "source": [
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"mse\",\n",
        "              metrics=[\"accuracy\"])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 3 hidden layers\n",
        "model1.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"binary_crossentropy\",\n",
        "              metrics=[\"accuracy\"])"
      ],
      "metadata": {
        "id": "U9yS0f6dVhut"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 1 hidden layers\n",
        "model2.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"binary_crossentropy\",\n",
        "              metrics=[\"accuracy\"])"
      ],
      "metadata": {
        "id": "Z06PNx--VoQK"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "txiS2bY3RzcL"
      },
      "source": [
        "### Validating your approach"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eVm1zCA0RzcL"
      },
      "source": [
        "**Setting aside a validation set**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "IXd3WlB0RzcL"
      },
      "outputs": [],
      "source": [
        "x_val = x_train[:10000]\n",
        "partial_x_train = x_train[10000:]\n",
        "y_val = y_train[:10000]\n",
        "partial_y_train = y_train[10000:]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KbQuAbIARzcM"
      },
      "source": [
        "**Training your model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "MxpfXfuORzcM",
        "outputId": "f59de0f7-2e05-45d7-d8da-2e00f558bd22",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 5s 71ms/step - loss: 0.1949 - accuracy: 0.7379 - val_loss: 0.1417 - val_accuracy: 0.8415\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 1s 26ms/step - loss: 0.1148 - accuracy: 0.8771 - val_loss: 0.1078 - val_accuracy: 0.8737\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0857 - accuracy: 0.9058 - val_loss: 0.0938 - val_accuracy: 0.8838\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 1s 34ms/step - loss: 0.0685 - accuracy: 0.9244 - val_loss: 0.0881 - val_accuracy: 0.8841\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0596 - accuracy: 0.9319 - val_loss: 0.0839 - val_accuracy: 0.8875\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 1s 30ms/step - loss: 0.0509 - accuracy: 0.9445 - val_loss: 0.0837 - val_accuracy: 0.8850\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0457 - accuracy: 0.9511 - val_loss: 0.0832 - val_accuracy: 0.8848\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0408 - accuracy: 0.9574 - val_loss: 0.0841 - val_accuracy: 0.8822\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0354 - accuracy: 0.9657 - val_loss: 0.0847 - val_accuracy: 0.8823\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0325 - accuracy: 0.9679 - val_loss: 0.0860 - val_accuracy: 0.8811\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0294 - accuracy: 0.9732 - val_loss: 0.0950 - val_accuracy: 0.8701\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0265 - accuracy: 0.9751 - val_loss: 0.0946 - val_accuracy: 0.8749\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 1s 26ms/step - loss: 0.0241 - accuracy: 0.9788 - val_loss: 0.0897 - val_accuracy: 0.8802\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0224 - accuracy: 0.9799 - val_loss: 0.0974 - val_accuracy: 0.8725\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0209 - accuracy: 0.9825 - val_loss: 0.0917 - val_accuracy: 0.8763\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0179 - accuracy: 0.9857 - val_loss: 0.0929 - val_accuracy: 0.8766\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 1s 23ms/step - loss: 0.0165 - accuracy: 0.9876 - val_loss: 0.0978 - val_accuracy: 0.8710\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 1s 23ms/step - loss: 0.0154 - accuracy: 0.9890 - val_loss: 0.0955 - val_accuracy: 0.8759\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0142 - accuracy: 0.9893 - val_loss: 0.0968 - val_accuracy: 0.8747\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.0126 - accuracy: 0.9907 - val_loss: 0.0977 - val_accuracy: 0.8754\n"
          ]
        }
      ],
      "source": [
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "history = model1.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))"
      ],
      "metadata": {
        "id": "6pwGg0wXVzd1",
        "outputId": "77d84bf9-2df9-4a3a-b253-564d72607d24",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 2s 63ms/step - loss: 0.0021 - accuracy: 0.9999 - val_loss: 0.6662 - val_accuracy: 0.8694\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0017 - accuracy: 0.9999 - val_loss: 0.7125 - val_accuracy: 0.8706\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 1s 23ms/step - loss: 0.0189 - accuracy: 0.9943 - val_loss: 0.7142 - val_accuracy: 0.8699\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 1s 23ms/step - loss: 0.0012 - accuracy: 0.9999 - val_loss: 0.7311 - val_accuracy: 0.8695\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 1s 23ms/step - loss: 0.0010 - accuracy: 0.9999 - val_loss: 0.7664 - val_accuracy: 0.8690\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0110 - accuracy: 0.9966 - val_loss: 0.7810 - val_accuracy: 0.8694\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 6.2831e-04 - accuracy: 1.0000 - val_loss: 0.7939 - val_accuracy: 0.8685\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 1s 26ms/step - loss: 5.0926e-04 - accuracy: 1.0000 - val_loss: 0.8232 - val_accuracy: 0.8694\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0127 - accuracy: 0.9968 - val_loss: 0.8586 - val_accuracy: 0.8679\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 1s 23ms/step - loss: 4.1295e-04 - accuracy: 1.0000 - val_loss: 0.8535 - val_accuracy: 0.8678\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 1s 26ms/step - loss: 3.1933e-04 - accuracy: 1.0000 - val_loss: 0.8697 - val_accuracy: 0.8686\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 1s 23ms/step - loss: 2.5568e-04 - accuracy: 1.0000 - val_loss: 0.9040 - val_accuracy: 0.8691\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.0101 - accuracy: 0.9967 - val_loss: 0.9408 - val_accuracy: 0.8699\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 1s 29ms/step - loss: 1.9994e-04 - accuracy: 1.0000 - val_loss: 0.9419 - val_accuracy: 0.8707\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 1s 27ms/step - loss: 1.7504e-04 - accuracy: 1.0000 - val_loss: 0.9516 - val_accuracy: 0.8704\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 1s 22ms/step - loss: 1.5035e-04 - accuracy: 1.0000 - val_loss: 0.9791 - val_accuracy: 0.8690\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 1s 26ms/step - loss: 1.2248e-04 - accuracy: 1.0000 - val_loss: 1.0043 - val_accuracy: 0.8690\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 9.3032e-05 - accuracy: 1.0000 - val_loss: 1.0325 - val_accuracy: 0.8689\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 1s 23ms/step - loss: 7.7254e-05 - accuracy: 1.0000 - val_loss: 1.0519 - val_accuracy: 0.8691\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 6.4544e-05 - accuracy: 1.0000 - val_loss: 1.0712 - val_accuracy: 0.8696\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "history = model2.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))"
      ],
      "metadata": {
        "id": "V_TZQi0qV5bY",
        "outputId": "99d15e72-776d-4465-ec24-b92f3478066f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 2s 75ms/step - loss: 0.0488 - accuracy: 0.9915 - val_loss: 0.3839 - val_accuracy: 0.8758\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 1s 47ms/step - loss: 0.0450 - accuracy: 0.9928 - val_loss: 0.3952 - val_accuracy: 0.8753\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 1s 46ms/step - loss: 0.0410 - accuracy: 0.9941 - val_loss: 0.4033 - val_accuracy: 0.8732\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 1s 23ms/step - loss: 0.0379 - accuracy: 0.9944 - val_loss: 0.4155 - val_accuracy: 0.8745\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 1s 22ms/step - loss: 0.0348 - accuracy: 0.9961 - val_loss: 0.4250 - val_accuracy: 0.8738\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0324 - accuracy: 0.9967 - val_loss: 0.4377 - val_accuracy: 0.8742\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0308 - accuracy: 0.9971 - val_loss: 0.4492 - val_accuracy: 0.8732\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0274 - accuracy: 0.9975 - val_loss: 0.4758 - val_accuracy: 0.8706\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0262 - accuracy: 0.9978 - val_loss: 0.4672 - val_accuracy: 0.8706\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 1s 23ms/step - loss: 0.0236 - accuracy: 0.9983 - val_loss: 0.4800 - val_accuracy: 0.8724\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0216 - accuracy: 0.9992 - val_loss: 0.4886 - val_accuracy: 0.8708\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0210 - accuracy: 0.9991 - val_loss: 0.5077 - val_accuracy: 0.8715\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 1s 22ms/step - loss: 0.0188 - accuracy: 0.9992 - val_loss: 0.5110 - val_accuracy: 0.8692\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 1s 22ms/step - loss: 0.0172 - accuracy: 0.9994 - val_loss: 0.5228 - val_accuracy: 0.8718\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0160 - accuracy: 0.9995 - val_loss: 0.5359 - val_accuracy: 0.8674\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 1s 22ms/step - loss: 0.0150 - accuracy: 0.9997 - val_loss: 0.5466 - val_accuracy: 0.8698\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 1s 22ms/step - loss: 0.0138 - accuracy: 0.9996 - val_loss: 0.5734 - val_accuracy: 0.8625\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 1s 39ms/step - loss: 0.0131 - accuracy: 0.9997 - val_loss: 0.5669 - val_accuracy: 0.8689\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 1s 40ms/step - loss: 0.0118 - accuracy: 0.9998 - val_loss: 0.5769 - val_accuracy: 0.8687\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0108 - accuracy: 0.9997 - val_loss: 0.5915 - val_accuracy: 0.8693\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "id": "Cxc2AVa3RzcM",
        "outputId": "f1223b32-29d2-4380-a151-783138079100",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ],
      "source": [
        "history_dict = history.history\n",
        "history_dict.keys()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#2 hidden layers\n",
        "import matplotlib.pyplot as plt\n",
        "history_dict = history.history\n",
        "loss_values = history_dict[\"loss\"]\n",
        "val_loss_values = history_dict[\"val_loss\"]\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "plt.plot(epochs, loss_values, \"bo\", label=\"Training loss\")\n",
        "plt.plot(epochs, val_loss_values, \"b\", label=\"Validation loss\")\n",
        "plt.title(\"Training and validation loss\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "o1WNBjYHWp6F",
        "outputId": "0f800212-05be-4a5b-d4f3-300d3e65a5c9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cp6i1sFHRzcM"
      },
      "source": [
        "**Plotting the training and validation loss**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "sYakxVlQRzcM",
        "outputId": "ed067819-fa7f-4cf4-8f69-8e72355577b1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#3 hidden layers\n",
        "import matplotlib.pyplot as plt\n",
        "history_dict = history.history\n",
        "loss_values = history_dict[\"loss\"]\n",
        "val_loss_values = history_dict[\"val_loss\"]\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "plt.plot(epochs, loss_values, \"bo\", label=\"Training loss\")\n",
        "plt.plot(epochs, val_loss_values, \"b\", label=\"Validation loss\")\n",
        "plt.title(\"Training and validation loss\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#1 hidden layers\n",
        "import matplotlib.pyplot as plt\n",
        "history_dict = history.history\n",
        "loss_values = history_dict[\"loss\"]\n",
        "val_loss_values = history_dict[\"val_loss\"]\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "plt.plot(epochs, loss_values, \"bo\", label=\"Training loss\")\n",
        "plt.plot(epochs, val_loss_values, \"b\", label=\"Validation loss\")\n",
        "plt.title(\"Training and validation loss\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "8SFQdXbMWX0l",
        "outputId": "7fe2d303-4a5e-4b92-8710-64e5376b42af",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "history_dict = history.history\n",
        "loss_values = history_dict[\"loss\"]\n",
        "val_loss_values = history_dict[\"val_loss\"]\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "plt.plot(epochs, loss_values, \"bo\", label=\"Training loss\")\n",
        "plt.plot(epochs, val_loss_values, \"b\", label=\"Validation loss\")\n",
        "plt.title(\"Training and validation loss\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "xvERYVI4WBIJ",
        "outputId": "8a451ba7-34bc-40d8-f501-72555e57f181",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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RCQrDDdEREQkKww3REREJCsMN0RERCQrDDdEREQkKww3REREJCsMN0RERCQrDDdEREQkKww3REREJCsMN0RERCQr5Qo3169fxz///KN5f/z4cUyaNAmrV6/WWcWIiIiIyqNc4ebVV19FQkICACAlJQUvvfQSjh8/junTp2PevHk6rSARERFRWZQr3Pzxxx9o164dAOCHH35A8+bNcfToUXz33XdYt26dLutHREREVCblCjdPnz6FUqkEAMTFxaFPnz4AgCZNmuDWrVu6qx0RERFRGZUr3DRr1gyrVq3C4cOHceDAAXTv3h0AcPPmTTg6Ouq0gkRERERlUa5w89FHH+Hzzz9H586d8corr8DPzw8AsGPHDs3tKiIiIiJDUAghRHk2VKlUyMjIgIODg2bZlStXYGVlhdq1a+usgrqWkZEBOzs7pKenw9bW1tDVISIiolIoy/d3uVpuHj9+jOzsbE2wuXr1KqKjo5GUlFSlgw0RERHJX7nCTd++ffH1118DANLS0hAYGIglS5YgLCwMK1euLPP+VqxYAS8vL1hYWCAwMBDHjx8vsuzWrVvRpk0b2Nvbo2bNmvD398c333xTntMgIiIiGSpXuDl16hQ6dOgAANi8eTNcXFxw9epVfP311/j000/LtK+NGzciMjISs2fPxqlTp+Dn54fQ0FDcvn270PK1atXC9OnTkZiYiN9//x0jRozAiBEjsG/fvvKcChEREclMufrcWFlZ4eLFi6hXrx4GDx6MZs2aYfbs2bh+/Tp8fHyQlZVV6n0FBgaibdu2WL58OQBArVbDw8MD48ePx9SpU0u1j9atW6NXr16YP39+iWXZ54aIiMj46L3PTcOGDRETE4Pr169j37596NatGwDg9u3bZQoMOTk5OHnyJEJCQvIqZGKCkJAQJCYmlri9EALx8fFISkpCx44dy34iREREJDs1yrPRrFmz8Oqrr+Ldd99Fly5dEBQUBADYv38/WrVqVer93L17FyqVCi4uLlrLXVxccPHixSK3S09PR506dZCdnQ1TU1N89tlneOmllwotm52djezsbM37jIyMUtePiIiIjE+5ws3AgQPx4osv4tatW5oxbgCga9eu6Nevn84qVxQbGxucOXMGjx49Qnx8PCIjI9GgQQN07ty5QNmoqCjMnTtX73UiIiKiqqHc49zkyp0dvG7dumXeNicnB1ZWVti8eTPCwsI0yyMiIpCWlobt27eXaj9vvvmm5hbZ8wprufHw8GCfGyIiIiOi9z43arUa8+bNg52dHTw9PeHp6Ql7e3vMnz8farW61PsxNzdHQEAA4uPjtfYdHx+vudVV2vrkDzD5KZVK2Nraar2IiIhIvsp1W2r69On48ssvsWDBAgQHBwMAfv75Z8yZMwdPnjzBBx98UOp9RUZGIiIiAm3atEG7du0QHR2NzMxMjBgxAgAwbNgw1KlTB1FRUQCk20xt2rSBt7c3srOzsWfPHnzzzTflGl+HiIiI5Kdc4earr77Cf//7X81s4ADQsmVL1KlTB2PGjClTuAkPD8edO3cwa9YspKSkwN/fH7GxsZpOxteuXYOJSV4DU2ZmJsaMGYN//vkHlpaWaNKkCb799luEh4eX51SIiIhIZsrV58bCwgK///47GjdurLU8KSkJ/v7+ePz4sc4qqGsc54aIiMj46L3PjZ+fn2bQvfyWL1+Oli1blmeXRERERDpRrttSCxcuRK9evRAXF6fp+JuYmIjr169jz549Oq0gERERUVmUq+WmU6dO+PPPP9GvXz+kpaUhLS0N/fv3x7lz5ziJJRERERlUhce5ye+3335D69atoVKpdLVLnWOfGyIiIuOj9z43RERERFUVww0RERHJCsMNERERyUqZnpbq379/sevT0tIqUhciIiKiCitTuLGzsytx/bBhwypUISIiIqKKKFO4Wbt2rb7qQURERKQT7HNDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREssJwQ0RERLLCcENERESywnBDREREslIlws2KFSvg5eUFCwsLBAYG4vjx40WW/eKLL9ChQwc4ODjAwcEBISEhxZYnIiKi6sXg4Wbjxo2IjIzE7NmzcerUKfj5+SE0NBS3b98utPyhQ4fw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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "training loss always go down\n"
      ],
      "metadata": {
        "id": "5kmD9tYYUrfg"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y3xX21RlRzcM"
      },
      "source": [
        "**Plotting the training and validation accuracy**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "cJQPI7jdRzcM",
        "outputId": "0f5a91b1-14db-471b-e399-93ae607b93f9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.clf()\n",
        "acc = history_dict[\"accuracy\"]\n",
        "val_acc = history_dict[\"val_accuracy\"]\n",
        "plt.plot(epochs, acc, \"bo\", label=\"Training acc\")\n",
        "plt.plot(epochs, val_acc, \"b\", label=\"Validation acc\")\n",
        "plt.title(\"Training and validation accuracy\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QvNii9V7RzcM"
      },
      "source": [
        "**Retraining a model from scratch**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "j6ZNZcPsRzcN"
      },
      "outputs": [],
      "source": [
        "model = keras.Sequential([\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(16, activation=\"relu\"),\n",
        "    layers.Dense(1, activation=\"sigmoid\")\n",
        "])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"binary_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "model.fit(x_train, y_train, epochs=4, batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XPv0Upg8RzcN"
      },
      "outputs": [],
      "source": [
        "results"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uTX8Q7IQRzcN"
      },
      "source": [
        "### Using a trained model to generate predictions on new data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "k1eQmoXwRzcN"
      },
      "outputs": [],
      "source": [
        "model.predict(x_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9nqF6GH1RzcN"
      },
      "source": [
        "### Further experiments"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cBA18xngRzcN"
      },
      "source": [
        "### Wrapping up"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9UswVO3zRzcN"
      },
      "source": [
        "## Classifying newswires: A multiclass classification example"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AvFJFx5_RzcZ"
      },
      "source": [
        "### The Reuters dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IIjeRawkRzcZ"
      },
      "source": [
        "**Loading the Reuters dataset**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "EThblvU8Rzca",
        "outputId": "12a1d5bd-bc8b-4bb1-dbb0-039686fc105d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/reuters.npz\n",
            "2110848/2110848 [==============================] - 1s 1us/step\n"
          ]
        }
      ],
      "source": [
        "from tensorflow.keras.datasets import reuters\n",
        "(train_data, train_labels), (test_data, test_labels) = reuters.load_data(\n",
        "    num_words=10000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "bT4ENWy8Rzca",
        "outputId": "a64adbe2-1f75-4563-d610-e9fecd706aea",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8982"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "len(train_data)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_labels[:10]"
      ],
      "metadata": {
        "id": "wvUxFn4pY-mH",
        "outputId": "c3c99587-8348-4663-beb0-f0f40e88e0bc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 3,  4,  3,  4,  4,  4,  4,  3,  3, 16])"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "al-dN1khRzca",
        "outputId": "4754ea3e-4b79-45d9-c762-9fdc8239fd42",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2246"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "len(test_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "d3SnDcdfRzca",
        "outputId": "90119f0e-1b60-4a56-a0bc-6e9b0445aa53",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1,\n",
              " 245,\n",
              " 273,\n",
              " 207,\n",
              " 156,\n",
              " 53,\n",
              " 74,\n",
              " 160,\n",
              " 26,\n",
              " 14,\n",
              " 46,\n",
              " 296,\n",
              " 26,\n",
              " 39,\n",
              " 74,\n",
              " 2979,\n",
              " 3554,\n",
              " 14,\n",
              " 46,\n",
              " 4689,\n",
              " 4329,\n",
              " 86,\n",
              " 61,\n",
              " 3499,\n",
              " 4795,\n",
              " 14,\n",
              " 61,\n",
              " 451,\n",
              " 4329,\n",
              " 17,\n",
              " 12]"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "train_data[10]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UtRjO3-CRzca"
      },
      "source": [
        "**Decoding newswires back to text**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "hEqWsGMCRzca",
        "outputId": "fb75096e-f041-4abf-803f-1ae2cb621bc8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/reuters_word_index.json\n",
            "550378/550378 [==============================] - 1s 1us/step\n"
          ]
        }
      ],
      "source": [
        "word_index = reuters.get_word_index()\n",
        "reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n",
        "decoded_newswire = \" \".join([reverse_word_index.get(i - 3, \"?\") for i in\n",
        "    train_data[0]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "iCAYX4UwRzcb",
        "outputId": "e43168e8-6d42-4187-9279-87ec3f25a049",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "train_labels[10]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xNaDNgOMRzcb"
      },
      "source": [
        "### Preparing the data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pac748l2Rzcb"
      },
      "source": [
        "**Encoding the input data**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "Dvwrlg1VRzcb"
      },
      "outputs": [],
      "source": [
        "x_train = vectorize_sequences(train_data)\n",
        "x_test = vectorize_sequences(test_data)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.shape"
      ],
      "metadata": {
        "id": "9YRPL4lmZKXq",
        "outputId": "4704f069-93e7-4213-d550-e174d3a3acc3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8982, 10000)"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DyB4NOrSRzcb"
      },
      "source": [
        "**Encoding the labels**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "1w1kX0BhRzcb"
      },
      "outputs": [],
      "source": [
        "def to_one_hot(labels, dimension=46):\n",
        "    results = np.zeros((len(labels), dimension))\n",
        "    for i, label in enumerate(labels):\n",
        "        results[i, label] = 1.\n",
        "    return results\n",
        "y_train = to_one_hot(train_labels)\n",
        "y_test = to_one_hot(test_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "w6XTqKQ8Rzcc"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.utils import to_categorical\n",
        "y_train = to_categorical(train_labels)\n",
        "y_test = to_categorical(test_labels)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_labels[:10]"
      ],
      "metadata": {
        "id": "PFocK_hYZfGt",
        "outputId": "33c03338-beb1-47c0-e9d2-9feb9dc65531",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 3,  4,  3,  4,  4,  4,  4,  3,  3, 16])"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train[:10]"
      ],
      "metadata": {
        "id": "3QfFGwqyZj-8",
        "outputId": "388e48bc-1116-477e-88c8-f127c182f5ef",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],\n",
              "      dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WUn3gmg7Rzcc"
      },
      "source": [
        "### Building your model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KmgGlsE2Rzcc"
      },
      "source": [
        "**Model definition**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "zGszp6SxRzcc"
      },
      "outputs": [],
      "source": [
        "model = keras.Sequential([\n",
        "    layers.Dense(64, activation=\"relu\"),\n",
        "    layers.Dense(64, activation=\"relu\"),\n",
        "    layers.Dense(46, activation=\"softmax\")\n",
        "])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K0jZB5AGRzcc"
      },
      "source": [
        "**Compiling the model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "Tpqep870Rzcc"
      },
      "outputs": [],
      "source": [
        "\n",
        "#if you dont use one_hot you have to use loss function here is sparts categorical_crossentropy\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1Q2wKi4nRzcd"
      },
      "source": [
        "### Validating your approach"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wrrRyBTLRzcd"
      },
      "source": [
        "**Setting aside a validation set**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "xsHKYbBVRzcd"
      },
      "outputs": [],
      "source": [
        "x_val = x_train[:1000]\n",
        "partial_x_train = x_train[1000:]\n",
        "y_val = y_train[:1000]\n",
        "partial_y_train = y_train[1000:]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GUL0KuquRzcd"
      },
      "source": [
        "**Training the model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "-D7UuvhhRzcd",
        "outputId": "0a5a2559-7728-4d00-b089-3bdd2c314f81",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "16/16 [==============================] - 2s 37ms/step - loss: 2.7290 - accuracy: 0.4899 - val_loss: 1.8607 - val_accuracy: 0.6000\n",
            "Epoch 2/20\n",
            "16/16 [==============================] - 0s 19ms/step - loss: 1.5496 - accuracy: 0.6654 - val_loss: 1.4101 - val_accuracy: 0.6740\n",
            "Epoch 3/20\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 1.1944 - accuracy: 0.7280 - val_loss: 1.2002 - val_accuracy: 0.7280\n",
            "Epoch 4/20\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.9814 - accuracy: 0.7841 - val_loss: 1.0867 - val_accuracy: 0.7580\n",
            "Epoch 5/20\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.8121 - accuracy: 0.8240 - val_loss: 1.0458 - val_accuracy: 0.7630\n",
            "Epoch 6/20\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.6746 - accuracy: 0.8555 - val_loss: 0.9585 - val_accuracy: 0.7870\n",
            "Epoch 7/20\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.5630 - accuracy: 0.8794 - val_loss: 0.9220 - val_accuracy: 0.8000\n",
            "Epoch 8/20\n",
            "16/16 [==============================] - 0s 20ms/step - loss: 0.4668 - accuracy: 0.9038 - val_loss: 0.8874 - val_accuracy: 0.8170\n",
            "Epoch 9/20\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.3994 - accuracy: 0.9164 - val_loss: 0.8743 - val_accuracy: 0.8130\n",
            "Epoch 10/20\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.3321 - accuracy: 0.9287 - val_loss: 0.8693 - val_accuracy: 0.8180\n",
            "Epoch 11/20\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.2848 - accuracy: 0.9391 - val_loss: 0.8631 - val_accuracy: 0.8230\n",
            "Epoch 12/20\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.2496 - accuracy: 0.9440 - val_loss: 0.9495 - val_accuracy: 0.8060\n",
            "Epoch 13/20\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.2248 - accuracy: 0.9470 - val_loss: 0.9109 - val_accuracy: 0.8170\n",
            "Epoch 14/20\n",
            "16/16 [==============================] - 0s 19ms/step - loss: 0.1975 - accuracy: 0.9509 - val_loss: 0.8846 - val_accuracy: 0.8190\n",
            "Epoch 15/20\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.1836 - accuracy: 0.9513 - val_loss: 0.9177 - val_accuracy: 0.8080\n",
            "Epoch 16/20\n",
            "16/16 [==============================] - 0s 20ms/step - loss: 0.1622 - accuracy: 0.9548 - val_loss: 0.9586 - val_accuracy: 0.8050\n",
            "Epoch 17/20\n",
            "16/16 [==============================] - 0s 19ms/step - loss: 0.1545 - accuracy: 0.9549 - val_loss: 0.9471 - val_accuracy: 0.8150\n",
            "Epoch 18/20\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.1484 - accuracy: 0.9550 - val_loss: 0.9278 - val_accuracy: 0.8130\n",
            "Epoch 19/20\n",
            "16/16 [==============================] - 0s 24ms/step - loss: 0.1346 - accuracy: 0.9582 - val_loss: 0.9720 - val_accuracy: 0.8090\n",
            "Epoch 20/20\n",
            "16/16 [==============================] - 0s 21ms/step - loss: 0.1316 - accuracy: 0.9562 - val_loss: 0.9780 - val_accuracy: 0.8070\n"
          ]
        }
      ],
      "source": [
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "beMFq2vhRzcd"
      },
      "source": [
        "**Plotting the training and validation loss**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "wkcD5GztRzce",
        "outputId": "e23ffaaa-5ed4-4ed7-e97d-2c6e49919614",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "loss = history.history[\"loss\"]\n",
        "val_loss = history.history[\"val_loss\"]\n",
        "epochs = range(1, len(loss) + 1)\n",
        "plt.plot(epochs, loss, \"bo\", label=\"Training loss\")\n",
        "plt.plot(epochs, val_loss, \"b\", label=\"Validation loss\")\n",
        "plt.title(\"Training and validation loss\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "as15duJKRzce"
      },
      "source": [
        "**Plotting the training and validation accuracy**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fW6nAoRRRzce"
      },
      "outputs": [],
      "source": [
        "plt.clf()\n",
        "acc = history.history[\"accuracy\"]\n",
        "val_acc = history.history[\"val_accuracy\"]\n",
        "plt.plot(epochs, acc, \"bo\", label=\"Training accuracy\")\n",
        "plt.plot(epochs, val_acc, \"b\", label=\"Validation accuracy\")\n",
        "plt.title(\"Training and validation accuracy\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "to86GeL1Rzce"
      },
      "source": [
        "**Retraining a model from scratch**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iU0dtGAMRzce"
      },
      "outputs": [],
      "source": [
        "model = keras.Sequential([\n",
        "  layers.Dense(64, activation=\"relu\"),\n",
        "  layers.Dense(64, activation=\"relu\"),\n",
        "  layers.Dense(46, activation=\"softmax\")\n",
        "])\n",
        "\n",
        "#categorical_crossentropy vs sparts categorical crossentropy : in chapter2 practice we dont convert data but we convert our data in here\n",
        "#so we use categorical crossentrpy here\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "model.fit(x_train,\n",
        "          y_train,\n",
        "          epochs=9,\n",
        "          batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5cTRJQb7Rzce"
      },
      "outputs": [],
      "source": [
        "results"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_uDVx3HNRzce"
      },
      "outputs": [],
      "source": [
        "import copy\n",
        "test_labels_copy = copy.copy(test_labels)\n",
        "np.random.shuffle(test_labels_copy)\n",
        "hits_array = np.array(test_labels) == np.array(test_labels_copy)\n",
        "hits_array.mean()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M-tNReJLRzcf"
      },
      "source": [
        "### Generating predictions on new data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "r4qbdT-ZRzcf",
        "outputId": "eed424f6-0a9b-4adb-8e3b-77d9a20c7598",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "71/71 [==============================] - 0s 2ms/step\n"
          ]
        }
      ],
      "source": [
        "predictions = model.predict(x_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "IRgdGXaYRzcf",
        "outputId": "54762338-fa5f-4015-912a-0df24fe15095",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(46,)"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ],
      "source": [
        "predictions[0].shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "78OPddjlRzcf",
        "outputId": "e8998376-7e9a-46fb-cae7-11ae4fd70e70",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.99999994"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ],
      "source": [
        "np.sum(predictions[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "id": "KIQhNoE2Rzcf",
        "outputId": "7f3caf21-41c8-496a-ce3d-339e423daf4b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ],
      "source": [
        "np.argmax(predictions[0])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j3osuFlLRzcf"
      },
      "source": [
        "### A different way to handle the labels and the loss"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c3iC6CSWRzcg"
      },
      "outputs": [],
      "source": [
        "y_train = np.array(train_labels)\n",
        "y_test = np.array(test_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e7sIt3B_Rzcg"
      },
      "outputs": [],
      "source": [
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"sparse_categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bnhrLqtxRzcg"
      },
      "source": [
        "### The importance of having sufficiently large intermediate layers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xwXKE_tCRzcg"
      },
      "source": [
        "**A model with an information bottleneck**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VqrDKrvaRzcg"
      },
      "outputs": [],
      "source": [
        "model = keras.Sequential([\n",
        "    layers.Dense(64, activation=\"relu\"),\n",
        "    layers.Dense(4, activation=\"relu\"),\n",
        "    layers.Dense(46, activation=\"softmax\")\n",
        "])\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=[\"accuracy\"])\n",
        "model.fit(partial_x_train,\n",
        "          partial_y_train,\n",
        "          epochs=20,\n",
        "          batch_size=128,\n",
        "          validation_data=(x_val, y_val))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bYqtkbKKRzch"
      },
      "source": [
        "### Further experiments"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cDFFY-ciRzch"
      },
      "source": [
        "### Wrapping up"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RR9JXnplRzch"
      },
      "source": [
        "## Predicting house prices: A regression example"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hq4kGqbsRzch"
      },
      "source": [
        "### The Boston Housing Price dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6YPHzP6mRzch"
      },
      "source": [
        "**Loading the Boston housing dataset**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "R6WpW85qRzch"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.datasets import boston_housing\n",
        "(train_data, train_targets), (test_data, test_targets) = boston_housing.load_data()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mfJ8oOsmRzch"
      },
      "outputs": [],
      "source": [
        "train_data.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MpLVgEDPRzci"
      },
      "outputs": [],
      "source": [
        "test_data.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9Bqy3b3tRzci"
      },
      "outputs": [],
      "source": [
        "train_targets"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iGQK8TnQRzci"
      },
      "source": [
        "### Preparing the data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_NBF38_CRzci"
      },
      "source": [
        "**Normalizing the data**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aNjVbpEgRzci"
      },
      "outputs": [],
      "source": [
        "mean = train_data.mean(axis=0)\n",
        "train_data -= mean\n",
        "std = train_data.std(axis=0)\n",
        "train_data /= std\n",
        "test_data -= mean\n",
        "test_data /= std"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_okYt5VVRzci"
      },
      "source": [
        "### Building your model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ix9-s-bDRzci"
      },
      "source": [
        "**Model definition**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gGJv1ZszRzcj"
      },
      "outputs": [],
      "source": [
        "def build_model():\n",
        "    model = keras.Sequential([\n",
        "        layers.Dense(64, activation=\"relu\"),\n",
        "        layers.Dense(64, activation=\"relu\"),\n",
        "        layers.Dense(1)\n",
        "    ])\n",
        "    model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n",
        "    return model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K_tIs_0kRzcj"
      },
      "source": [
        "### Validating your approach using K-fold validation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Sn6CY2oARzcj"
      },
      "source": [
        "**K-fold validation**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sy3gwKJSRzcj"
      },
      "outputs": [],
      "source": [
        "k = 4\n",
        "num_val_samples = len(train_data) // k\n",
        "num_epochs = 100\n",
        "all_scores = []\n",
        "for i in range(k):\n",
        "    print(f\"Processing fold #{i}\")\n",
        "    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n",
        "    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n",
        "    partial_train_data = np.concatenate(\n",
        "        [train_data[:i * num_val_samples],\n",
        "         train_data[(i + 1) * num_val_samples:]],\n",
        "        axis=0)\n",
        "    partial_train_targets = np.concatenate(\n",
        "        [train_targets[:i * num_val_samples],\n",
        "         train_targets[(i + 1) * num_val_samples:]],\n",
        "        axis=0)\n",
        "    model = build_model()\n",
        "    model.fit(partial_train_data, partial_train_targets,\n",
        "              epochs=num_epochs, batch_size=16, verbose=0)\n",
        "    val_mse, val_mae = model.evaluate(val_data, val_targets, verbose=0)\n",
        "    all_scores.append(val_mae)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Uu8QaCsGRzcj"
      },
      "outputs": [],
      "source": [
        "all_scores"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5E_Al4fhRzcj"
      },
      "outputs": [],
      "source": [
        "np.mean(all_scores)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "79bW3N0BRzcj"
      },
      "source": [
        "**Saving the validation logs at each fold**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sr6ioGMoRzck"
      },
      "outputs": [],
      "source": [
        "num_epochs = 500\n",
        "all_mae_histories = []\n",
        "for i in range(k):\n",
        "    print(f\"Processing fold #{i}\")\n",
        "    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n",
        "    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n",
        "    partial_train_data = np.concatenate(\n",
        "        [train_data[:i * num_val_samples],\n",
        "         train_data[(i + 1) * num_val_samples:]],\n",
        "        axis=0)\n",
        "    partial_train_targets = np.concatenate(\n",
        "        [train_targets[:i * num_val_samples],\n",
        "         train_targets[(i + 1) * num_val_samples:]],\n",
        "        axis=0)\n",
        "    model = build_model()\n",
        "    history = model.fit(partial_train_data, partial_train_targets,\n",
        "                        validation_data=(val_data, val_targets),\n",
        "                        epochs=num_epochs, batch_size=16, verbose=0)\n",
        "    mae_history = history.history[\"val_mae\"]\n",
        "    all_mae_histories.append(mae_history)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KhXkWia5Rzck"
      },
      "source": [
        "**Building the history of successive mean K-fold validation scores**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JkkziWVpRzck"
      },
      "outputs": [],
      "source": [
        "average_mae_history = [\n",
        "    np.mean([x[i] for x in all_mae_histories]) for i in range(num_epochs)]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WgeqrxAqRzck"
      },
      "source": [
        "**Plotting validation scores**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RqMIqKynRzck"
      },
      "outputs": [],
      "source": [
        "plt.plot(range(1, len(average_mae_history) + 1), average_mae_history)\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Validation MAE\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qWO8Qw7iRzck"
      },
      "source": [
        "**Plotting validation scores, excluding the first 10 data points**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_DxNjDxURzcl"
      },
      "outputs": [],
      "source": [
        "truncated_mae_history = average_mae_history[10:]\n",
        "plt.plot(range(1, len(truncated_mae_history) + 1), truncated_mae_history)\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Validation MAE\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mObn6tLLRzcl"
      },
      "source": [
        "**Training the final model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9iWYXWniRzcl"
      },
      "outputs": [],
      "source": [
        "model = build_model()\n",
        "model.fit(train_data, train_targets,\n",
        "          epochs=130, batch_size=16, verbose=0)\n",
        "test_mse_score, test_mae_score = model.evaluate(test_data, test_targets)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e4wp6tqsRzco"
      },
      "outputs": [],
      "source": [
        "test_mae_score"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TQ4SXfp2Rzco"
      },
      "source": [
        "### Generating predictions on new data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Mrei5UiORzco"
      },
      "outputs": [],
      "source": [
        "predictions = model.predict(test_data)\n",
        "predictions[0]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TnfpWYOERzco"
      },
      "source": [
        "### Wrapping up"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rxEx-v4oRzcp"
      },
      "source": [
        "## Summary"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "chapter04_getting-started-with-neural-networks.i",
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.0"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}